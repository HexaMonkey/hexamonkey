//
// This file was written using the MessagePack format specification:
// https://github.com/msgpack/msgpack/blob/master/spec.md
// (commit 8fc1ab3efbece26890d16baa8e5bbc6867ba80b8)
//

addExtension msgpack

import bestd

class MsgPackFile as File
{
	while(1) MsgPackType *; // The input file may contain concatenated msg pack objects
}

class MsgPackType(type)
{
    uint(8, 16) first_byte;
    if(first_byte == 0xc0) {
        @args.type = "nil";
    } else if (first_byte == 0xc2 || first_byte == 0xc3) {
        @args.type = "bool";
    } else if ((first_byte & 0b10000000) == 0) {
        @args.type = "positive_fixnum";
    } else if ((first_byte & 0b11100000) == 0b11100000) {
        @args.type = "negative_fixnum";
    } else if (first_byte == 0xcc) {
        @args.type = "uint_8";
    } else if (first_byte == 0xcd) {
        @args.type = "uint_16";
    } else if (first_byte == 0xce) {
        @args.type = "uint_32";
    } else if (first_byte == 0xcf) {
        @args.type = "uint_64";
    } else if (first_byte == 0xd0) {
        @args.type = "int_8";
    } else if (first_byte == 0xd1) {
        @args.type = "int_16";
    } else if (first_byte == 0xd2) {
        @args.type = "int_32";
    } else if (first_byte == 0xd3) {
        @args.type = "int_64";
    } else if (first_byte == 0xca) {
        @args.type = "float_32";
    } else if (first_byte == 0xcb) {
        @args.type = "float_64";
    } else if ((first_byte & 0b11100000) == 0b10100000) {
        @args.type = "fixstr";
    } else if (first_byte == 0xd9) {
        @args.type = "str_8";
    } else if (first_byte == 0xda) {
        @args.type = "str_16";
    } else if (first_byte == 0xdb) {
        @args.type = "str_32";
    } else if (first_byte == 0xc4) {
        @args.type = "bin_8";
    } else if (first_byte == 0xc5) {
        @args.type = "bin_16";
    } else if (first_byte == 0xc6) {
        @args.type = "bin_32";
    } else if ((first_byte & 0b11110000) == 0b10010000) {
        @args.type = "fixarray";
    } else if (first_byte == 0xdc) {
        @args.type = "array_16";
    } else if (first_byte == 0xdd) {
        @args.type = "array_32";
    } else if ((first_byte & 0b11110000) == 0b10000000) {
        @args.type = "fixmap";
    } else if (first_byte == 0xde) {
        @args.type = "map_16";
    } else if (first_byte == 0xdf) {
        @args.type = "map_32";
    } else if (first_byte == 0xd4) {
        @args.type = "fixext_1";
    } else if (first_byte == 0xd5) {
        @args.type = "fixext_2";
    } else if (first_byte == 0xd6) {
        @args.type = "fixext_4";
    } else if (first_byte == 0xd7) {
        @args.type = "fixext_8";
    } else if (first_byte == 0xd8) {
        @args.type = "fixext_16";
    } else if (first_byte == 0xc7) {
        @args.type = "ext_8";
    } else if (first_byte == 0xc8) {
        @args.type = "ext_16";
    } else if (first_byte == 0xc9) {
        @args.type = "ext_32";
    } else {
        @value = "Unknown MsgPack type";
    }
}

class MsgPackNil as MsgPackType("nil") {
    @value = "nil";
}

class MsgPackBool as MsgPackType("bool") {
    if(first_byte == 0xc2) {
        @value = "false";
    } else if (first_byte == 0xc3) {
        @value = "true";
    }
}

class MsgPackUInt7b as MsgPackType("positive_fixnum") {
    @value = %str(first_byte & 0b01111111, 10, 1);
}

class MsgPackInt5b as MsgPackType("negative_fixnum") {
    @value = -32 + (first_byte & 0b00011111);
}

class MsgPackUInt8b as MsgPackType("uint_8") {
    uint(8, 10) value;
    @value = value;
}

class MsgPackUInt16b as MsgPackType("uint_16") {
    uint(16, 10) value;
    @value = value;
}

class MsgPackUInt32b as MsgPackType("uint_32") {
    uint(32, 10) value;
    @value = value;
}

class MsgPackUInt64b as MsgPackType("uint_64") {
    uint(64, 10) value;
    @value = value;
}

class MsgPackInt8b as MsgPackType("int_8") {
    int(8, 10) value;
    @value = value;
}

class MsgPackInt16b as MsgPackType("int_16") {
    int(16, 10) value;
    @value = value;
}

class MsgPackInt32b as MsgPackType("int_32") {
    int(32, 10) value;
    @value = value;
}

class MsgPackInt64b as MsgPackType("int_64") {
    int(64, 10) value;
    @value = value;
}

class MsgPackFloat32b as MsgPackType("float_32") {
    float value;
    @value = %float(value);
}

class MsgPackFloat64b as MsgPackType("float_64") {
    double value;
    @value = value;
}

class MsgPackFixStr as MsgPackType("fixstr") {
    String(first_byte & 0b00011111) string;
    @value = string;
}

class MsgPackStr8 as MsgPackType("str_8") {
    uint(8, 10) length;
    String(length) string;
    @value = string;
}

class MsgPackStr16 as MsgPackType("str_16") {
    uint(16, 10) length;
    String(length) string;
    @value = string;
}

class MsgPackStr32 as MsgPackType("str_32") {
    uint(32, 10) length;
    String(length) string;
    @value = string;
}

class MsgPackBin8 as MsgPackType("bin_8") {
    uint(8, 10) length;
    Data(length) bin;
}

class MsgPackBin16 as MsgPackType("bin_16") {
    uint(16, 10) length;
    Data(length) bin;
}

class MsgPackBin32 as MsgPackType("bin_32") {
    uint(32, 10) length;
    Data(length) bin;
}

class MsgPackFixArray as MsgPackType("fixarray") {
    var length = first_byte & 0b00001111;
    @value = "array of " + %str(length, 10, 1) + " objects";
    MsgPackType tuple[length];
}

class MsgPackArray16 as MsgPackType("array_16") {
    uint(16, 10) length;
    @value = "array of " + %str(length, 10, 1) + " objects";
    MsgPackType tuple[length];
}

class MsgPackArray32 as MsgPackType("array_32") {
    uint(32, 10) length;
    @value = "array of " + %str(length, 10, 1) + " objects";
    MsgPackType tuple[length];
}

class MsgPackMapEntry {
    MsgPackType key;
    MsgPackType val;
}

class MsgPackFixMap as MsgPackType("fixmap") {
    var length = first_byte & 0b00001111;
    @value = "map with " + %str(length, 10, 1) + " entries";
    MsgPackMapEntry map[length];
}

class MsgPackMap16 as MsgPackType("map_16") {
    uint(16, 10) length;
    @value = "map with " + %str(length, 10, 1) + " entries";
    MsgPackMapEntry map[length];
}

class MsgPackMap32 as MsgPackType("map_32") {
    uint(32, 10) length;
    @value = "map with " + %str(length, 10, 1) + " entries";
    MsgPackMapEntry map[length];
}

class MsgPackFixExt(fixext_size) {
    int(8, 10) ext_type;
    Data(@args.fixext_size) ext_data;
    @value = "fixext" + " of ext type " + ext_type;
}

class MsgPackFixExt1  extends MsgPackFixExt(1)  as MsgPackType("fixext_1") ;

class MsgPackFixExt2  extends MsgPackFixExt(2)  as MsgPackType("fixext_2") ;

class MsgPackFixExt4  extends MsgPackFixExt(4)  as MsgPackType("fixext_4") ;

class MsgPackFixExt8  extends MsgPackFixExt(8)  as MsgPackType("fixext_8") ;

class MsgPackFixExt16 extends MsgPackFixExt(16) as MsgPackType("fixext_16") ;

class MsgPackExt8 as MsgPackType("ext_8") {
    int(8, 10) ext_type;
    uint(8, 10) length;
    Data(length) ext_data;
    @value = "ext type(" + ext_type + ") size(" + length + ")";
}

class MsgPackExt16 as MsgPackType("ext_16") {
    int(8, 10) ext_type;
    uint(16, 10) length;
    Data(length) ext_data;
    @value = "ext type(" + ext_type + ") size(" + length + ")";
}

class MsgPackExt32 as MsgPackType("ext_32") {
    int(8, 10) ext_type;
    uint(32, 10) length;
    Data(length) ext_data;
    @value = "ext type(" + ext_type + ") size(" + length + ")";
}

