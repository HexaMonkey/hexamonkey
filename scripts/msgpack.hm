//
// This file was written using the MessagePack format specification:
// https://github.com/msgpack/msgpack/blob/master/spec.md
// (commit 8fc1ab3efbece26890d16baa8e5bbc6867ba80b8)
//

addExtension msgpack

import bestd

class MsgPackFile as File
{
	while(1) MsgPackObject *; // The input file may contain concatenated msg pack objects
}

class MsgPackObject(byteId)
{
    uint(8, 16) first_byte;
	
	if ((first_byte & 0b10000000) == 0b00000000) { // 0x00-0x7f 
		@args.byteId = 0x00;
	} else if ((first_byte & 0b11110000) == 0b10000000) { // 0x80-0x8f
		@args.byteId = 0x80;
	} else if ((first_byte & 0b11110000) == 0b10010000) { // 0x90-0x9f
		@args.byteId = 0x90;
	} else if ((first_byte & 0b11100000) == 0b10100000) { // 0xa0-0xbf
		@args.byteId = 0xa0;
	} else if ((first_byte & 0b11100000) == 0b11100000) { // 0xe0-0xff 
		@args.byteId = 0xe0;
	} else {
		@args.byteId = first_byte;
	}
}

// Nil
class MsgPackNil as MsgPackObject(0xc0) {
    @value = null;
}

// Bool family
class MsgPackBool(_value) extends MsgPackObject
{
	@value = @args._value;
}

forward MsgPackObject(0xc2) to MsgPackBool(0)
forward MsgPackObject(0xc3) to MsgPackBool(1)

// Integer family
class MsgPackPositiveFixNum as MsgPackObject(0x00) {
    @value = first_byte & 0b01111111;
}

class MsgPackNegativeFixNum as MsgPackObject(0xe0) {
    @value = -32 + (first_byte & 0b00011111);
}

class MsgPackUInt(size) extends MsgPackObject {
	uint(size) value;
	@value = value;
}

forward MsgPackObject(0xcc) to MsgPackUInt(8)
forward MsgPackObject(0xcd) to MsgPackUInt(16)
forward MsgPackObject(0xce) to MsgPackUInt(32)
forward MsgPackObject(0xcf) to MsgPackUInt(64)

class MsgPackInt(size) extends MsgPackObject {
	uint(size) value;
	@value = value;
}

forward MsgPackObject(0xd0) to MsgPackInt(8)
forward MsgPackObject(0xd1) to MsgPackInt(16)
forward MsgPackObject(0xd2) to MsgPackInt(32)
forward MsgPackObject(0xd3) to MsgPackInt(64)

// Float
class MsgPackFloat(size) extends MsgPackObject {
	if (@args.size == 32) {
		float value;
	} else {
		double value;
	}
    @value = value;
}

forward MsgPackObject(0xca) to MsgPackFloat(32)
forward MsgPackObject(0xcb) to MsgPackFloat(64)

// String family
class MsgPackFixStr as MsgPackObject(0xa0) {
    var length = first_byte & 0b00001111;
    String(length) string;
    @value = string;
}

class MsgPackStr(length_size) extends MsgPackObject {
    uint(@args.length_size) length;
    String(length) string;
    @value = string;
}

forward MsgPackObject(0xd9) to MsgPackStr(16)
forward MsgPackObject(0xda) to MsgPackStr(32)
forward MsgPackObject(0xdb) to MsgPackStr(64)

// Binary data family
class MsgPackBin(length_size) extends MsgPackObject {
    uint(@args.length_size) length;
    Data(8*length) bin;
}

forward MsgPackObject(0xc4) to MsgPackBin(8)
forward MsgPackObject(0xc5) to MsgPackBin(16)
forward MsgPackObject(0xc6) to MsgPackBin(32)

// Array family
class MsgPackFixArray as MsgPackObject("fixarray") {
    var length = first_byte & 0b00001111;
    @attr.length = length;
    MsgPackObject tuple[length];
}

class MsgPackArray(length_size) extends MsgPackObject {
    uint(@args.length_size, 10) length;
	@attr.length = length;
    MsgPackObject tuple[length];
}

forward MsgPackObject(0xdc) to MsgPackArray(16)
forward MsgPackObject(0xdd) to MsgPackArray(16)

// Map family
class MsgPackMapEntry {
    MsgPackObject key;
    MsgPackObject value;
}

class MsgPackFixMap as MsgPackObject(0x80) {
    var length = first_byte & 0b00001111;
	@attr.length = length;
    MsgPackMapEntry map[length];
}

class MsgPackMap(length_size) extends MsgPackObject {
    uint(length_size, 10) length;
	@attr.length = length;
    MsgPackMapEntry map[length];
}

forward MsgPackObject(0xde) to MsgPackMap(16)
forward MsgPackObject(0xdf) to MsgPackMap(32)

// Extension family
class MsgPackExt(length_size) extends MsgPackObject {
	uint(length_size) length;
    int(8, 10) ext_type;
	@attr.type = ext_type;
    Data(8*length) ext_data;
}

forward MsgPackObject(0xc7) to MsgPackExt(8)
forward MsgPackObject(0xc8) to MsgPackExt(16)
forward MsgPackObject(0xc9) to MsgPackExt(32)

class MsgPackFixExt(fixext_size) extends MsgPackObject {
    int(8) ext_type;
	@attr.type = ext_type;
    Data(8*@args.fixext_size) ext_data;
}

forward MsgPackObject(0xd4) to MsgPackFixExt(1)
forward MsgPackObject(0xd5) to MsgPackFixExt(2)
forward MsgPackObject(0xd6) to MsgPackFixExt(4)
forward MsgPackObject(0xd7) to MsgPackFixExt(8)
forward MsgPackObject(0xd8) to MsgPackFixExt(16)