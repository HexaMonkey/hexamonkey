virtual class Interoperability(namespace, tag) extends Data(96)
{
    uint(16, 16) tag;
    @args.tag = tag;
    uint(16, 16) type;
    uint(32) count;
    
    typeMap := @global.typeMap;
    if (typeMap == undefined) {
        typeMap := @global.typeMap := {};
    
        typeMap[1]  = uint(8);     // BYTE
        typeMap[2]  = String(1);   // ASCII
        typeMap[3]  = uint(16);    // SHORT
        typeMap[4]  = uint(32);    // LONG
        typeMap[5]  = rational();  // RATIONAL
        typeMap[7]  = Data(8);     // UNDEFINED
        typeMap[9]  = int(32);     // SLONG
        typeMap[10] = srational(); // SRATIONAL
    }
    
    var valueType = typeMap[type];
    if (count != 1) {
        if (type == 2) {//ASCII
            valueType = String(count);
        } else if (type == 7) {
            valueType = Data(8*count);
        } else {
            valueType = Tuple(valueType, count);
        }
    }
    @attr._valueType = valueType;
    
    ...
    valueType = @attr._valueType;
    var valueSize = %sizeof(valueType);
    if (valueSize > @rem) {
        uint(32) valueOffset;
        @linkTo = @context.offset + 8 * valueOffset;
    } else {
        (valueType) value;
        @value = value;
        if (value.@attr.type) {
            @attr.type = value.@attr.type;
        }
        if (@rem) {
            Data(@rem) padding;
        }
    }    
}

class rational 
{
    uint(32) numerator;
    uint(32) denominator;
    @value = numerator / denominator;
}

class srational 
{
    int(32) numerator;
    int(32) denominator;
    @value = numerator / denominator;
}

class ProcessingSoftwareInteroperability as Interoperability("Image", 0x000B)
{

}

class ImageIDInteroperability as Interoperability("Image", 0x800D)
{

}

class GPSTagInteroperability as Interoperability("Image", 0x8825)
{

}

class InterlaceInteroperability as Interoperability("Image", 0x8829)
{

}

class TimeZoneOffsetInteroperability as Interoperability("Image", 0x882A)
{

}

class SelfTimerModeInteroperability as Interoperability("Image", 0x882B)
{

}

class DNGVersionInteroperability as Interoperability("Image", 0xC612)
{

}

class ImageNumberInteroperability as Interoperability("Image", 0x9211)
{

}

class SecurityClassificationInteroperability as Interoperability("Image", 0x9212)
{

}

class YCbCrPositioningInteroperability as Interoperability("Image", 0x0213)
{
    @attr._valueType = YCbCrPositioniningValue();
}

class YCbCrPositioniningValue extends uint(16)
{
    if (@value == 1) {
        @attr.type = "centered";
    } else if (@value == 2) {
        @attr.type = "co-sited";
    }
}

class UniqueCameraModelInteroperability as Interoperability("Image", 0xC614)
{

}

class LocalizedCameraModelInteroperability as Interoperability("Image", 0xC615)
{

}

class CFAPlaneColorInteroperability as Interoperability("Image", 0xC616)
{

}

class CFALayoutInteroperability as Interoperability("Image", 0xC617)
{

}

class XPTitleInteroperability as Interoperability("Image", 0x9C9B)
{

}

class XPCommentInteroperability as Interoperability("Image", 0x9C9C)
{

}

class XPAuthorInteroperability as Interoperability("Image", 0x9C9D)
{

}

class XPKeywordsInteroperability as Interoperability("Image", 0x9C9E)
{

}

class XPSubjectInteroperability as Interoperability("Image", 0x9C9F)
{

}

class PrintImageMatchingInteroperability as Interoperability("Image", 0xC4A5)
{

}

class NewSubfileTypeInteroperability as Interoperability("Image", 0x00FE)
{

}

class SubfileTypeInteroperability as Interoperability("Image", 0x00FF)
{

}

class ImageWidthInteroperability as Interoperability("Image", 0x0100)
{

}

class ImageLengthInteroperability as Interoperability("Image", 0x0101)
{

}

class BitsPerSampleInteroperability as Interoperability("Image", 0x0102)
{

}

class CompressionInteroperability as Interoperability("Image", 0x0103)
{
    @attr._valueType = CompressionValue();
}

class CompressionValue extends uint(16)
{
    if (@value == 1) {
        @attr.type = "uncompressed";
    } else if (@value == 6) {
        @attr.type = "JPEG compression";
    }
}

class PhotometricInterpretationInteroperability as Interoperability("Image", 0x0106)
{
    @attr._valueType = PhotometricInterpretationValue();
}

class PhotometricInterpretationValue extends uint(16)
{
    if (@value == 2) {
        @attr.type = "RGB";
    } else if (@value == 6) {
        @attr.type = "YCbCr";
    }
}

class ThreshholdingInteroperability as Interoperability("Image", 0x0107)
{

}

class CellWidthInteroperability as Interoperability("Image", 0x0108)
{

}

class CellLengthInteroperability as Interoperability("Image", 0x0109)
{

}

class FillOrderInteroperability as Interoperability("Image", 0x010A)
{

}

class DocumentNameInteroperability as Interoperability("Image", 0x010D)
{

}

class ImageDescriptionInteroperability as Interoperability("Image", 0x010E)
{

}

class MakeInteroperability as Interoperability("Image", 0x010F)
{

}

class ModelInteroperability as Interoperability("Image", 0x0110)
{

}

class StripOffsetsInteroperability as Interoperability("Image", 0x0111)
{

}

class OrientationInteroperability as Interoperability("Image", 0x0112)
{
    @attr._valueType = OrientationValue();
}

class OrientationValue extends uint(16)
{
    if (@value == 1) {
        @attr.type = "top-left";
    } else if (@value == 2) {
        @attr.type = "top-right";
    } else if (@value == 3) {
        @attr.type = "bottom-right";
    } else if (@value == 4) {
        @attr.type = "bottom-left";
    } else if (@value == 5) {
        @attr.type = "left-top";
    } else if (@value == 6) {
        @attr.type = "right-top";
    } else if (@value == 7) {
        @attr.type = "right-bottom";
    } else if (@value == 8) {
        @attr.type = "left-bottom";
    }
}

class SamplesPerPixelInteroperability as Interoperability("Image", 0x0115)
{

}

class RowsPerStripInteroperability as Interoperability("Image", 0x0116)
{

}

class StripByteCountsInteroperability as Interoperability("Image", 0x0117)
{

}

class XResolutionInteroperability as Interoperability("Image", 0x011A)
{

}

class YResolutionInteroperability as Interoperability("Image", 0x011B)
{

}

class PlanarConfigurationInteroperability as Interoperability("Image", 0x011C)
{
    @attr._valueType = PlanarConfigurationValue();
}

class PlanarConfigurationValue extends uint(16)
{
    if (@value == 1) {
        @attr.type = "chunky format";
    } else if (@value == 2) {
        @attr.type = "planar format";
    }
}

class GrayResponseUnitInteroperability as Interoperability("Image", 0x0122)
{

}

class GrayResponseCurveInteroperability as Interoperability("Image", 0x0123)
{

}

class T4OptionsInteroperability as Interoperability("Image", 0x0124)
{

}

class T6OptionsInteroperability as Interoperability("Image", 0x0125)
{

}

class ResolutionUnitInteroperability as Interoperability("Image", 0x0128)
{
    @attr._valueType = ResolutionUnitValue();
}

class ResolutionUnitValue extends uint(16)
{
    if (@value == 2) {
        @attr.type = "inches";
    } else if (@value == 3) {
        @attr.type = "centimeters";
    }
}

class TransferFunctionInteroperability as Interoperability("Image", 0x012D)
{

}

class SoftwareInteroperability as Interoperability("Image", 0x0131)
{

}

class DateTimeInteroperability as Interoperability("Image", 0x0132)
{

}

class ArtistInteroperability as Interoperability("Image", 0x013B)
{

}

class HostComputerInteroperability as Interoperability("Image", 0x013C)
{

}

class PredictorInteroperability as Interoperability("Image", 0x013D)
{

}

class WhitePointInteroperability as Interoperability("Image", 0x013E)
{

}

class PrimaryChromaticitiesInteroperability as Interoperability("Image", 0x013F)
{

}

class ColorMapInteroperability as Interoperability("Image", 0x0140)
{

}

class HalftoneHintsInteroperability as Interoperability("Image", 0x0141)
{

}

class TileWidthInteroperability as Interoperability("Image", 0x0142)
{

}

class TileLengthInteroperability as Interoperability("Image", 0x0143)
{

}

class TileOffsetsInteroperability as Interoperability("Image", 0x0144)
{

}

class TileByteCountsInteroperability as Interoperability("Image", 0x0145)
{

}

class SubIFDsInteroperability as Interoperability("Image", 0x014A)
{

}

class InkSetInteroperability as Interoperability("Image", 0x014C)
{

}

class InkNamesInteroperability as Interoperability("Image", 0x014D)
{

}

class NumberOfInksInteroperability as Interoperability("Image", 0x014E)
{

}

class DotRangeInteroperability as Interoperability("Image", 0x0150)
{

}

class TargetPrinterInteroperability as Interoperability("Image", 0x0151)
{

}

class ExtraSamplesInteroperability as Interoperability("Image", 0x0152)
{

}

class SampleFormatInteroperability as Interoperability("Image", 0x0153)
{

}

class SMinSampleValueInteroperability as Interoperability("Image", 0x0154)
{

}

class SMaxSampleValueInteroperability as Interoperability("Image", 0x0155)
{

}

class TransferRangeInteroperability as Interoperability("Image", 0x0156)
{

}

class ClipPathInteroperability as Interoperability("Image", 0x0157)
{

}

class XClipPathUnitsInteroperability as Interoperability("Image", 0x0158)
{

}

class YClipPathUnitsInteroperability as Interoperability("Image", 0x0159)
{

}

class IndexedInteroperability as Interoperability("Image", 0x015A)
{

}

class JPEGTablesInteroperability as Interoperability("Image", 0x015B)
{

}

class OPIProxyInteroperability as Interoperability("Image", 0x015F)
{

}

class JPEGProcInteroperability as Interoperability("Image", 0x0200)
{

}

class JPEGInterchangeFormatInteroperability as Interoperability("Image", 0x0201)
{

}

class JPEGInterchangeFormatLengthInteroperability as Interoperability("Image", 0x0202)
{

}

class JPEGRestartIntervalInteroperability as Interoperability("Image", 0x0203)
{

}

class JPEGLosslessPredictorsInteroperability as Interoperability("Image", 0x0205)
{

}

class JPEGPointTransformsInteroperability as Interoperability("Image", 0x0206)
{

}

class JPEGQTablesInteroperability as Interoperability("Image", 0x0207)
{

}

class JPEGDCTablesInteroperability as Interoperability("Image", 0x0208)
{

}

class JPEGACTablesInteroperability as Interoperability("Image", 0x0209)
{

}

class FlashEnergyInteroperability as Interoperability("Image", 0x920B)
{

}

class SpatialFrequencyResponseInteroperability as Interoperability("Image", 0x920C)
{
    @attr._valueType = SpatialFrequencyData(count);
}

class SpatialFrequencyData(_count) extends Data(_count)
{
    uint(16) columns;
    uint(16) rows;
    String columnItemNames[columns];
    srational values[columns][rows];
}

class NoiseInteroperability as Interoperability("Image", 0x920D)
{

}

class FocalPlaneXResolutionInteroperability as Interoperability("Image", 0x920E)
{

}

class FocalPlaneYResolutionInteroperability as Interoperability("Image", 0x920F)
{

}

class FocalPlaneResolutionUnitInteroperability as Interoperability("Image", 0x9210)
{

}

class YCbCrCoefficientsInteroperability as Interoperability("Image", 0x0211)
{

}

class YCbCrSubSamplingInteroperability as Interoperability("Image", 0x0212)
{
    @attr._valueType = YCbCrSubSamplingValue();
}

class YCbCrSubSamplingValue extends Tuple(uint(16), 2)
{
    if (self[0].@value == 2) {
        if (self[1].@value == 1) {
            @attr.type = "YCbCr4:2:2";
        } else if (self[1].@value == 2) {
            @attr.type = "YCbCr4:2:0";
        }
    }
}

class DNGBackwardVersionInteroperability as Interoperability("Image", 0xC613)
{

}

class ReferenceBlackWhiteInteroperability as Interoperability("Image", 0x0214)
{

}

class ExposureIndexInteroperability as Interoperability("Image", 0x9215)
{

}

class TIFFEPStandardIDInteroperability as Interoperability("Image", 0x9216)
{

}

class SensingMethodInteroperability as Interoperability("Image", 0x9217)
{
    @attr._valueType = SensingMethodValue();
}

class SensingMethodValue extends uint(16)
{
    if (@value == 1) {
        @attr.type = "Not defined";
    } else if (@value == 2) {
        @attr.type = "One-chip area sensor";
    } else if (@value == 3) {
        @attr.type = "Two-chip area sensor";
    } else if (@value == 4) {
        @attr.type = "Three-chip area sensor";
    } else if (@value == 5) {
        @attr.type = "Color sequential area sensor";
    } else if (@value == 7) {
        @attr.type = "Trilinear sensor";
    } else if (@value == 8) {
        @attr.type = "Color sequential linear sensor";
    }
}

class LinearizationTableInteroperability as Interoperability("Image", 0xC618)
{

}

class BlackLevelRepeatDimInteroperability as Interoperability("Image", 0xC619)
{

}

class BlackLevelInteroperability as Interoperability("Image", 0xC61A)
{

}

class BlackLevelDeltaHInteroperability as Interoperability("Image", 0xC61B)
{

}

class BlackLevelDeltaVInteroperability as Interoperability("Image", 0xC61C)
{

}

class WhiteLevelInteroperability as Interoperability("Image", 0xC61D)
{

}

class DefaultScaleInteroperability as Interoperability("Image", 0xC61E)
{

}

class DefaultCropOriginInteroperability as Interoperability("Image", 0xC61F)
{

}

class DefaultCropSizeInteroperability as Interoperability("Image", 0xC620)
{

}

class ColorMatrix1Interoperability as Interoperability("Image", 0xC621)
{

}

class ColorMatrix2Interoperability as Interoperability("Image", 0xC622)
{

}

class CameraCalibration1Interoperability as Interoperability("Image", 0xC623)
{

}

class CameraCalibration2Interoperability as Interoperability("Image", 0xC624)
{

}

class ReductionMatrix1Interoperability as Interoperability("Image", 0xC625)
{

}

class ReductionMatrix2Interoperability as Interoperability("Image", 0xC626)
{

}

class AnalogBalanceInteroperability as Interoperability("Image", 0xC627)
{

}

class AsShotNeutralInteroperability as Interoperability("Image", 0xC628)
{

}

class AsShotWhiteXYInteroperability as Interoperability("Image", 0xC629)
{

}

class BaselineExposureInteroperability as Interoperability("Image", 0xC62A)
{

}

class BaselineNoiseInteroperability as Interoperability("Image", 0xC62B)
{

}

class BaselineSharpnessInteroperability as Interoperability("Image", 0xC62C)
{

}

class BayerGreenSplitInteroperability as Interoperability("Image", 0xC62D)
{

}

class LinearResponseLimitInteroperability as Interoperability("Image", 0xC62E)
{

}

class CameraSerialNumberInteroperability as Interoperability("Image", 0xC62F)
{

}

class LensInfoInteroperability as Interoperability("Image", 0xC630)
{

}

class ChromaBlurRadiusInteroperability as Interoperability("Image", 0xC631)
{

}

class AntiAliasStrengthInteroperability as Interoperability("Image", 0xC632)
{

}

class ShadowScaleInteroperability as Interoperability("Image", 0xC633)
{

}

class DNGPrivateDataInteroperability as Interoperability("Image", 0xC634)
{

}

class MakerNoteSafetyInteroperability as Interoperability("Image", 0xC635)
{

}

class ImageResourcesInteroperability as Interoperability("Image", 0x8649)
{

}

class CalibrationIlluminant1Interoperability as Interoperability("Image", 0xC65A)
{

}

class CalibrationIlluminant2Interoperability as Interoperability("Image", 0xC65B)
{

}

class BestQualityScaleInteroperability as Interoperability("Image", 0xC65C)
{

}

class RawDataUniqueIDInteroperability as Interoperability("Image", 0xC65D)
{

}

class OriginalRawFileNameInteroperability as Interoperability("Image", 0xC68B)
{

}

class OriginalRawFileDataInteroperability as Interoperability("Image", 0xC68C)
{

}

class CFARepeatPatternDimInteroperability as Interoperability("Image", 0x828D)
{

}

class CFAPatternInteroperability as Interoperability("Image", 0x828E)
{
    @attr._valueType = CFAPatternData(count);
}

class CFAPatternData(_count) extends Data(_count)
{
    uint(16) columns;
    uint(16) rows;
    CFAValue values[columns][rows];
}

class CFAValue extends uint(8)
{
    if (@value == 0) {
        @attr.type = "RED";
    } else if (@value == 1) {
        @attr.type = "GREEN";
    } else if (@value == 2) {
        @attr.type = "BLUE";
    } else if (@value == 3) {
        @attr.type = "CYAN";
    } else if (@value == 4) {
        @attr.type = "MAGENTA";
    } else if (@value == 5) {
        @attr.type = "YELLOW";
    } else if (@value == 6) {
        @attr.type = "WHITE";
    }
}

class BatteryLevelInteroperability as Interoperability("Image", 0x828F)
{

}

class AsShotPreProfileMatrixInteroperability as Interoperability("Image", 0xC690)
{

}

class CurrentICCProfileInteroperability as Interoperability("Image", 0xC691)
{

}

class CurrentPreProfileMatrixInteroperability as Interoperability("Image", 0xC692)
{

}

class CopyrightInteroperability as Interoperability("Image", 0x8298)
{
    @attr._valueType = CopyrightStrings(count);
}

class CopyrightStrings(count) extends Data(8*count)
{
    @value = "";
    while(1) {
        String #;
        @value += self[];
        if (@rem) {
            @value += ";"; 
        }
    }
}

class ExposureTimeInteroperability as Interoperability("Image", 0x829A)
{

}

class XMLPacketInteroperability as Interoperability("Image", 0x02BC)
{

}

class ColorimetricReferenceInteroperability as Interoperability("Image", 0xC6BF)
{

}

class ImageHistoryInteroperability as Interoperability("Image", 0x9213)
{

}

class CameraCalibrationSignatureInteroperability as Interoperability("Image", 0xC6F3)
{

}

class ProfileCalibrationSignatureInteroperability as Interoperability("Image", 0xC6F4)
{

}

class AsShotProfileNameInteroperability as Interoperability("Image", 0xC6F6)
{

}

class NoiseReductionAppliedInteroperability as Interoperability("Image", 0xC6F7)
{

}

class ProfileNameInteroperability as Interoperability("Image", 0xC6F8)
{

}

class ProfileHueSatMapDimsInteroperability as Interoperability("Image", 0xC6F9)
{

}

class ProfileHueSatMapData1Interoperability as Interoperability("Image", 0xC6FA)
{

}

class ProfileHueSatMapData2Interoperability as Interoperability("Image", 0xC6FB)
{

}

class ProfileToneCurveInteroperability as Interoperability("Image", 0xC6FC)
{

}

class ProfileEmbedPolicyInteroperability as Interoperability("Image", 0xC6FD)
{

}

class ProfileCopyrightInteroperability as Interoperability("Image", 0xC6FE)
{

}

class ForwardMatrix1Interoperability as Interoperability("Image", 0xC714)
{

}

class ForwardMatrix2Interoperability as Interoperability("Image", 0xC715)
{

}

class PreviewApplicationNameInteroperability as Interoperability("Image", 0xC716)
{

}

class PreviewApplicationVersionInteroperability as Interoperability("Image", 0xC717)
{

}

class PreviewSettingsNameInteroperability as Interoperability("Image", 0xC718)
{

}

class PreviewSettingsDigestInteroperability as Interoperability("Image", 0xC719)
{

}

class PreviewColorSpaceInteroperability as Interoperability("Image", 0xC71A)
{

}

class PreviewDateTimeInteroperability as Interoperability("Image", 0xC71B)
{

}

class RawImageDigestInteroperability as Interoperability("Image", 0xC71C)
{

}

class OriginalRawFileDigestInteroperability as Interoperability("Image", 0xC71D)
{

}

class SubTileBlockSizeInteroperability as Interoperability("Image", 0xC71E)
{

}

class RowInterleaveFactorInteroperability as Interoperability("Image", 0xC71F)
{

}

class ProfileLookTableDimsInteroperability as Interoperability("Image", 0xC725)
{

}

class ProfileLookTableDataInteroperability as Interoperability("Image", 0xC726)
{

}

class OpcodeList1Interoperability as Interoperability("Image", 0xC740)
{

}

class OpcodeList2Interoperability as Interoperability("Image", 0xC741)
{

}

class RatingInteroperability as Interoperability("Image", 0x4746)
{

}

class RatingPercentInteroperability as Interoperability("Image", 0x4749)
{

}

class OpcodeList3Interoperability as Interoperability("Image", 0xC74E)
{

}

class ActiveAreaInteroperability as Interoperability("Image", 0xC68D)
{

}

class MaskedAreasInteroperability as Interoperability("Image", 0xC68E)
{

}

class AsShotICCProfileInteroperability as Interoperability("Image", 0xC68F)
{

}

class ExifTagInteroperability as Interoperability("Image", 0x8769)
{

}

class InterColorProfileInteroperability as Interoperability("Image", 0x8773)
{

}

class ProgramImageMatchingDataEntry(tag)
{
    uint(16, 16) tag;
    Data(32) content;
    @args.tag = tag;
}


class ProgramImageMatchingData(_size) extends Data(_size)
{
    String(8) header;
    String version;
    %log("rem : "+@rem);
    if ((@rem) % 32  != 0) {
        Data(32 - (@rem % 32)) padding;
    }
    uint(16) count;
    ProgramImageMatchingDataEntry entries[count];
}

class PrintImageMatchingInteroperability as Interoperability("Image", 0xC4A5)
{
    @attr._valueType = ProgramImageMatchingData(%sizeof(@attr._valueType));
}

class ExifVersionInteroperability as Interoperability("Exif", 0x9000)
{
    @attr._valueType = Version();
}

class ComponentsConfigurationInteroperability as Interoperability("Exif", 0x9101)
{
    @attr._valueType = ComponentsConfigurationValue(count);
}

class ComponentsConfigurationValue(count) extends Tuple(uint(8), count)
{
    @value = "";
    for (var i = 0; i < count; ++i) {
        var value = self[i];
        if (value == 1) {
            @value += "Y";
        } else if (value == 2) {
            @value += "Cb";
        } else if (value == 3) {
            @value += "Cr";
        } else if (value == 4) {
            @value += "R";
        } else if (value == 5) {
            @value += "G";
        } else if (value == 6) {
            @value += "B";
        }
    }
}

class CompressedBitsPerPixelInteroperability as Interoperability("Exif", 0x9102)
{

}

class DateTimeOriginalInteroperability as Interoperability("Exif", 0x9003)
{

}

class DateTimeDigitizedInteroperability as Interoperability("Exif", 0x9004)
{

}

class MaxApertureValueInteroperability as Interoperability("Exif", 0x9205)
{

}

class SubjectDistanceInteroperability as Interoperability("Exif", 0x9206)
{

}

class ShutterSpeedValueInteroperability as Interoperability("Exif", 0x9201)
{

}

class LightSourceInteroperability as Interoperability("Exif", 0x9208)
{
    @attr._valueType = LightSourceValue();
}

class LightSourceValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "unknown";
    } else if (@value == 1) {
        @attr.type = "Daylight";
    } else if (@value == 2) {
        @attr.type = "Fluorescent";
    } else if (@value == 3) {
        @attr.type = "Tungsten";
    } else if (@value == 4) {
        @attr.type = "Flash";
    } else if (@value == 9) {
        @attr.type = "Fine weather";
    } else if (@value == 10) {
        @attr.type = "Cloudy weather";
    } else if (@value == 11) {
        @attr.type = "Shade";
    } else if (@value == 12) {
        @attr.type = "Daylight fluorescentDay";
    } else if (@value == 13) {
        @attr.type = "Day white fluorescent";
    } else if (@value == 14) {
        @attr.type = "Cool white fluorescent";
    } else if (@value == 15) {
        @attr.type = "White fluorescent";
    } else if (@value == 17) {
        @attr.type = "Standard light A";
    } else if (@value == 18) {
        @attr.type = "Standard light B";
    } else if (@value == 19) {
        @attr.type = "Standard light C";
    } else if (@value == 20) {
        @attr.type = "D55";
    } else if (@value == 21) {
        @attr.type = "D65";
    } else if (@value == 22) {
        @attr.type = "D75";
    } else if (@value == 23) {
        @attr.type = "D50";
    } else if (@value == 24) {
        @attr.type = "ISO studio tungsten";
    } else if (@value == 255) {
        @attr.type = "other light source";
    }
}

class FlashInteroperability as Interoperability("Exif", 0x9209)
{
    @attr._valueType = FlashData();
}

class FlashData 
{
    uint(1) reserved;
    uint(1) redEyeMode;
    uint(1) flashFunction;
    
    uint(2) flashMode;
    if (flashMode == 0b01) {
        flashMode.@attr.type = "Compulsory flash firing";
    } else if (flashMode == 0b10) {
        flashMode.@attr.type = "Compulsory flash suppression";
    } else if (flashMode == 0b11) {
        flashMode.@attr.type = "Auto mode";
    } else {
        flashMode.@attr.type = "unknown";
    }
    
    uint(2) flashReturn;
    if (flashReturn == 0b00) {
        flashReturn.@attr.type = "No strobe return detection function";
    } else if (flashReturn == 0b10) {
        flashReturn.@attr.type = "Strobe return light not detected";
    } else if (flashReturn == 0b11) {
        flashReturn.@attr.type = "Strobe return light detected";
    }
    
    uint(1) flashFired;
}

class FocalLengthInteroperability as Interoperability("Exif", 0x920A)
{

}

class FlashEnergyInteroperability as Interoperability("Exif", 0xA20B)
{

}

class SpatialFrequencyResponseInteroperability as Interoperability("Exif", 0xA20C)
{

}

class ApertureValueInteroperability as Interoperability("Exif", 0x9202)
{

}

class FocalPlaneXResolutionInteroperability as Interoperability("Exif", 0xA20E)
{

}

class FocalPlaneYResolutionInteroperability as Interoperability("Exif", 0xA20F)
{

}

class SubSecTimeInteroperability as Interoperability("Exif", 0x9290)
{

}

class SubSecTimeOriginalInteroperability as Interoperability("Exif", 0x9291)
{

}

class SubSecTimeDigitizedInteroperability as Interoperability("Exif", 0x9292)
{

}

class BrightnessValueInteroperability as Interoperability("Exif", 0x9203)
{

}

class SubjectAreaInteroperability as Interoperability("Exif", 0x9214)
{

}

class ExposureIndexInteroperability as Interoperability("Exif", 0xA215)
{

}

class ContrastInteroperability as Interoperability("Exif", 0xA408)
{
    @attr._valueType = ContrastValue();
}

class ContrastValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Normal";
    } else if (@value == 1) {
        @attr.type = "Soft";
    } else if (@value == 2) {
        @attr.type = "Hard";
    }
}

class SensingMethodInteroperability as Interoperability("Exif", 0xA217)
{

}

class ExposureBiasValueInteroperability as Interoperability("Exif", 0x9204)
{

}

class ExposureTimeInteroperability as Interoperability("Exif", 0x829A)
{

}

class FNumberInteroperability as Interoperability("Exif", 0x829D)
{

}

class FileSourceInteroperability as Interoperability("Exif", 0xA300)
{
    @attr._valueType = FileSourceValue();
}

class FileSourceValue extends uint(8)
{
    if (@value == 3) {
        @attr.type = "DSC";
    }
}

class InteroperabilityTagInteroperability as Interoperability("Exif", 0xA005)
{

}

class ImageUniqueIDInteroperability as Interoperability("Exif", 0xA420)
{

}

class CameraOwnerNameInteroperability as Interoperability("Exif", 0xA430)
{

}

class ExposureProgramInteroperability as Interoperability("Exif", 0x8822)
{
    @attr._valueType = ExposureProgramValue();
}

class ExposureProgramValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Not defined";
    } else if (@value == 1) {
        @attr.type = "Manual";
    } else if (@value == 2) {
        @attr.type = "Normal program";
    } else if (@value == 3) {
        @attr.type = "Aperture priority";
    } else if (@value == 4) {
        @attr.type = "Shutter priority";
    } else if (@value == 5) {
        @attr.type = "Creative program";
    } else if (@value == 6) {
        @attr.type = "Action Program";
    } else if (@value == 7) {
        @attr.type = "Portrait mode";
    } else if (@value == 8) {
        @attr.type = "Landscape mode";
    }
}

class SpectralSensitivityInteroperability as Interoperability("Exif", 0x8824)
{

}

class UserCommentInteroperability as Interoperability("Exif", 0x9286)
{
    @attr._valueType = UserCommentData(count);
}

class UserCommentData(_count) extends Data(8*count)
{
    String(8) code;
    String payload;
    @value = payload;
}

class ISOSpeedRatingsInteroperability as Interoperability("Exif", 0x8827)
{

}

class OECFInteroperability as Interoperability("Exif", 0x8828)
{
    @attr._valueType = OECFData(count);
}

class OECFData(_count) extends Data(_count)
{
    uint(16) columns;
    uint(16) rows;
    String columnItemNames[columns];
    srational values[columns][rows];
}

class WhiteBalanceInteroperability as Interoperability("Exif", 0xA403)
{
    @attr._valueType = WhiteBalanceValue();
}

class WhiteBalanceValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Auto white balance";
    } else if (@value == 1) {
        @attr.type = "Manual white balance";
    }
}

class MeteringModeInteroperability as Interoperability("Exif", 0x9207)
{
    @attr._valueType = MeteringModeValue();
}

class MeteringModeValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "unknown";
    } else if (@value == 1) {
        @attr.type = "Average";
    } else if (@value == 2) {
        @attr.type = "CenterWeightedAverage";
    } else if (@value == 3) {
        @attr.type = "Spot";
    } else if (@value == 4) {
        @attr.type = "MultiSpot";
    } else if (@value == 5) {
        @attr.type = "Pattern";
    } else if (@value == 6) {
        @attr.type = "Partial";
    } else if (@value == 255) {
        @attr.type = "other";
    }
}

class LensSpecificationInteroperability as Interoperability("Exif", 0xA432)
{

}

class GammaInteroperability as Interoperability("Exif", 0xA500)
{

}

class SensitivityTypeInteroperability as Interoperability("Exif", 0x8830)
{

}

class StandardOutputSensitivityInteroperability as Interoperability("Exif", 0x8831)
{

}

class RecommendedExposureIndexInteroperability as Interoperability("Exif", 0x8832)
{

}

class ISOSpeedInteroperability as Interoperability("Exif", 0x8833)
{

}

class ISOSpeedLatitudeyyyInteroperability as Interoperability("Exif", 0x8834)
{

}

class ISOSpeedLatitudezzzInteroperability as Interoperability("Exif", 0x8835)
{

}

class SaturationInteroperability as Interoperability("Exif", 0xA409)
{
    @attr._valueType = SaturationValue();
}

class SaturationValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Normal";
    } else if (@value == 1) {
        @attr.type = "Low saturation";
    } else if (@value == 2) {
        @attr.type = "High saturation";
    }
}

class LensModelInteroperability as Interoperability("Exif", 0xA434)
{

}

class SceneTypeInteroperability as Interoperability("Exif", 0xA301)
{
    @attr._valueType = SceneTypeValue();
}

class SceneTypeValue extends uint(8)
{
    if (@value == 1) {
        @attr.type = "A directly photographed image";
    }
}

class SharpnessInteroperability as Interoperability("Exif", 0xA40A)
{
    @attr._valueType = SharpnessValue();
}

class SharpnessValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Normal";
    } else if (@value == 1) {
        @attr.type = "Soft";
    } else if (@value == 2) {
        @attr.type = "Hard";
    }
}

class LensSerialNumberInteroperability as Interoperability("Exif", 0xA435)
{

}

class DigitalZoomRatioInteroperability as Interoperability("Exif", 0xA404)
{

}

class PixelXDimensionInteroperability as Interoperability("Exif", 0xA002)
{

}

class DeviceSettingDescriptionInteroperability as Interoperability("Exif", 0xA40B)
{
    @attr._valueType = DeviceSettingData(count);
}

class DeviceSettingData(_count) extends Data(_count)
{
    uint(16) columns;
    uint(16) rows;
    String(columns) values[rows];
}

class CustomRenderedInteroperability as Interoperability("Exif", 0xA401)
{
    @attr._valueType = CustomRenderedValue();
}

class CustomRenderedValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Normal process";
    } else if (@value == 1) {
        @attr.type = "Custom process";
    }
}

class FlashpixVersionInteroperability as Interoperability("Exif", 0xA000)
{
    @attr._valueType = Version();
}

class Version extends String(4)
{
    @value = %int(@value)/100.0;
}

class SubjectDistanceRangeInteroperability as Interoperability("Exif", 0xA40C)
{
    @attr._valueType = SubjectDistanceValue();
}

class SubjectDistanceValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "unknown";
    } else if (@value == 1) {
        @attr.type = "Macro";
    } else if (@value == 2) {
        @attr.type = "Close view";
    } else if (@value == 3) {
        @attr.type = "Distant view";
    }
}

class LensMakeInteroperability as Interoperability("Exif", 0xA433)
{

}

class FocalLengthIn35mmFilmInteroperability as Interoperability("Exif", 0xA405)
{

}

class CFAPatternInteroperability as Interoperability("Exif", 0xA302)
{

}

class ColorSpaceInteroperability as Interoperability("Exif", 0xA001)
{
    @attr._valueType = ColorSpaceValue();
}

class ColorSpaceValue extends uint(16)
{
    if (@value == 1) {
        @attr.type = "sRGB";
    } else if (@value == 0xffff) {
        @attr.type = "Uncalibrated";
    }
}

class PixelYDimensionInteroperability as Interoperability("Exif", 0xA003)
{

}

class FocalPlaneResolutionUnitInteroperability as Interoperability("Exif", 0xA210)
{

}

class ExposureModeInteroperability as Interoperability("Exif", 0xA402)
{
    @attr._valueType = ExposureModeValue();
}

class ExposureModeValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Normal process";
    } else if (@value == 1) {
        @attr.type = "Custom process";
    }
}

class BodySerialNumberInteroperability as Interoperability("Exif", 0xA431)
{

}

class SceneCaptureTypeInteroperability as Interoperability("Exif", 0xA406)
{
    @attr._valueType = SceneCaptureValue();
}

class SceneCaptureValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Standard";
    } else if (@value == 1) {
        @attr.type = "Landscape";
    } else if (@value == 2) {
        @attr.type = "Portrait";
    } else if (@value == 3) {
        @attr.type = "Night scene";
    }
}

class GainControlInteroperability as Interoperability("Exif", 0xA407)
{
    @attr._valueType = GainControlValue();
}

class GainControlValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "None";
    } else if (@value == 1) {
        @attr.type = "Low gain up";
    } else if (@value == 2) {
        @attr.type = "High gain up";
    } else if (@value == 3) {
        @attr.type = "Low gain down";
    } else if (@value == 4) {
        @attr.type = "High gain down";
    }
}

class SubjectLocationInteroperability as Interoperability("Exif", 0xA214)
{

}

class MakerNoteInteroperability as Interoperability("Exif", 0x927C)
{

}

class RelatedSoundFileInteroperability as Interoperability("Exif", 0xA004)
{

}

class GPSVersionIDInteroperability as Interoperability("GPS", 0x0000)
{

}

class GPSLatitudeRefInteroperability as Interoperability("GPS", 0x0001)
{

}

class GPSLatitudeInteroperability as Interoperability("GPS", 0x0002)
{

}

class GPSLongitudeRefInteroperability as Interoperability("GPS", 0x0003)
{

}

class GPSLongitudeInteroperability as Interoperability("GPS", 0x0004)
{

}

class GPSAltitudeRefInteroperability as Interoperability("GPS", 0x0005)
{
    @attr._valueType = GPSAltitudeRefValue();
}

class GPSAltitudeRefValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Sea level";
    } else if (@value == 1) {
        @attr.type = "Sea level reference (negative value)";
    }
}

class GPSAltitudeInteroperability as Interoperability("GPS", 0x0006)
{

}

class GPSTimeStampInteroperability as Interoperability("GPS", 0x0007)
{

}

class GPSSatellitesInteroperability as Interoperability("GPS", 0x0008)
{

}

class GPSStatusInteroperability as Interoperability("GPS", 0x0009)
{

}

class GPSMeasureModeInteroperability as Interoperability("GPS", 0x000A)
{

}

class GPSDOPInteroperability as Interoperability("GPS", 0x000B)
{

}

class GPSSpeedRefInteroperability as Interoperability("GPS", 0x000C)
{

}

class GPSSpeedInteroperability as Interoperability("GPS", 0x000D)
{

}

class GPSTrackRefInteroperability as Interoperability("GPS", 0x000E)
{

}

class GPSTrackInteroperability as Interoperability("GPS", 0x000F)
{

}

class GPSImgDirectionRefInteroperability as Interoperability("GPS", 0x0010)
{

}

class GPSImgDirectionInteroperability as Interoperability("GPS", 0x0011)
{

}

class GPSMapDatumInteroperability as Interoperability("GPS", 0x0012)
{

}

class GPSDestLatitudeRefInteroperability as Interoperability("GPS", 0x0013)
{

}

class GPSDestLatitudeInteroperability as Interoperability("GPS", 0x0014)
{

}

class GPSDestLongitudeRefInteroperability as Interoperability("GPS", 0x0015)
{

}

class GPSDestLongitudeInteroperability as Interoperability("GPS", 0x0016)
{

}

class GPSDestBearingRefInteroperability as Interoperability("GPS", 0x0017)
{

}

class GPSDestBearingInteroperability as Interoperability("GPS", 0x0018)
{

}

class GPSDestDistanceRefInteroperability as Interoperability("GPS", 0x0019)
{

}

class GPSDestDistanceInteroperability as Interoperability("GPS", 0x001A)
{

}

class GPSProcessingMethodInteroperability as Interoperability("GPS", 0x001B)
{

}

class GPSAreaInformationInteroperability as Interoperability("GPS", 0x001C)
{

}

class GPSDateStampInteroperability as Interoperability("GPS", 0x001D)
{

}

class GPSDifferentialInteroperability as Interoperability("GPS", 0x001E)
{

}

class GPSHPositioningErrorInteroperability as Interoperability("GPS", 0x001F)
{

}

class InteroperabilityIndexInteroperability as Interoperability("Interop", 0x0001)
{

}

