//This file is part of the HexaMonkey project, a multimedia analyser
//Copyright (C) 2013  Sevan Drapeau-Martin, Nicolas Fleury

//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either version 2
//of the License, or (at your option) any later version.

//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import tiff

class ProgramImageMatchingDataEntry(tag)
{
    uint(16, 16) tag;
    Data(32) content;
    @args.tag = tag;
}


class ProgramImageMatchingData(_size) extends Data(_size)
{
    String(8) header;
    String version;

    if ((@rem) % 32  != 0) {
        Data(32 - (@rem % 32)) padding;
    }
    uint(16) count;
    ProgramImageMatchingDataEntry entries[count];
}

class PrintImageMatchingInteroperability as Interoperability("Image", 0xC4A5)
{
    @attr._valueType = ProgramImageMatchingData(SizeOf:@attr._valueType);
}

class ExifVersionInteroperability as Interoperability("Exif", 0x9000)
{
    @attr._valueType = Version();
}

class ComponentsConfigurationInteroperability as Interoperability("Exif", 0x9101)
{
    @attr._valueType = ComponentsConfigurationValue(count);
}

class ComponentsConfigurationValue(count) extends Tuple(uint(8), count)
{
    @value = "";
    for (var i = 0; i < count; ++i) {
        var value = self[i];
        if (value == 1) {
            @value += "Y";
        } else if (value == 2) {
            @value += "Cb";
        } else if (value == 3) {
            @value += "Cr";
        } else if (value == 4) {
            @value += "R";
        } else if (value == 5) {
            @value += "G";
        } else if (value == 6) {
            @value += "B";
        }
    }
}

class CompressedBitsPerPixelInteroperability as Interoperability("Exif", 0x9102)
{

}

class DateTimeOriginalInteroperability as Interoperability("Exif", 0x9003)
{

}

class DateTimeDigitizedInteroperability as Interoperability("Exif", 0x9004)
{

}

class MaxApertureValueInteroperability as Interoperability("Exif", 0x9205)
{

}

class SubjectDistanceInteroperability as Interoperability("Exif", 0x9206)
{

}

class ShutterSpeedValueInteroperability as Interoperability("Exif", 0x9201)
{

}

class LightSourceInteroperability as Interoperability("Exif", 0x9208)
{
    @attr._valueType = LightSourceValue();
}

class LightSourceValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "unknown";
    } else if (@value == 1) {
        @attr.type = "Daylight";
    } else if (@value == 2) {
        @attr.type = "Fluorescent";
    } else if (@value == 3) {
        @attr.type = "Tungsten";
    } else if (@value == 4) {
        @attr.type = "Flash";
    } else if (@value == 9) {
        @attr.type = "Fine weather";
    } else if (@value == 10) {
        @attr.type = "Cloudy weather";
    } else if (@value == 11) {
        @attr.type = "Shade";
    } else if (@value == 12) {
        @attr.type = "Daylight fluorescentDay";
    } else if (@value == 13) {
        @attr.type = "Day white fluorescent";
    } else if (@value == 14) {
        @attr.type = "Cool white fluorescent";
    } else if (@value == 15) {
        @attr.type = "White fluorescent";
    } else if (@value == 17) {
        @attr.type = "Standard light A";
    } else if (@value == 18) {
        @attr.type = "Standard light B";
    } else if (@value == 19) {
        @attr.type = "Standard light C";
    } else if (@value == 20) {
        @attr.type = "D55";
    } else if (@value == 21) {
        @attr.type = "D65";
    } else if (@value == 22) {
        @attr.type = "D75";
    } else if (@value == 23) {
        @attr.type = "D50";
    } else if (@value == 24) {
        @attr.type = "ISO studio tungsten";
    } else if (@value == 255) {
        @attr.type = "other light source";
    }
}

class FlashInteroperability as Interoperability("Exif", 0x9209)
{
    @attr._valueType = FlashData();
}

class FlashData 
{
    uint(1) reserved;
    uint(1) redEyeMode;
    uint(1) flashFunction;
    
    uint(2) flashMode;
    if (flashMode == 0b01) {
        flashMode.@attr.type = "Compulsory flash firing";
    } else if (flashMode == 0b10) {
        flashMode.@attr.type = "Compulsory flash suppression";
    } else if (flashMode == 0b11) {
        flashMode.@attr.type = "Auto mode";
    } else {
        flashMode.@attr.type = "unknown";
    }
    
    uint(2) flashReturn;
    if (flashReturn == 0b00) {
        flashReturn.@attr.type = "No strobe return detection function";
    } else if (flashReturn == 0b10) {
        flashReturn.@attr.type = "Strobe return light not detected";
    } else if (flashReturn == 0b11) {
        flashReturn.@attr.type = "Strobe return light detected";
    }
    
    uint(1) flashFired;
}

class FocalLengthInteroperability as Interoperability("Exif", 0x920A)
{

}

class FlashEnergyInteroperability as Interoperability("Exif", 0xA20B)
{

}

class SpatialFrequencyResponseInteroperability as Interoperability("Exif", 0xA20C)
{

}

class ApertureValueInteroperability as Interoperability("Exif", 0x9202)
{

}

class FocalPlaneXResolutionInteroperability as Interoperability("Exif", 0xA20E)
{

}

class FocalPlaneYResolutionInteroperability as Interoperability("Exif", 0xA20F)
{

}

class SubSecTimeInteroperability as Interoperability("Exif", 0x9290)
{

}

class SubSecTimeOriginalInteroperability as Interoperability("Exif", 0x9291)
{

}

class SubSecTimeDigitizedInteroperability as Interoperability("Exif", 0x9292)
{

}

class BrightnessValueInteroperability as Interoperability("Exif", 0x9203)
{

}

class SubjectAreaInteroperability as Interoperability("Exif", 0x9214)
{

}

class ExposureIndexInteroperability as Interoperability("Exif", 0xA215)
{

}

class ContrastInteroperability as Interoperability("Exif", 0xA408)
{
    @attr._valueType = ContrastValue();
}

class ContrastValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Normal";
    } else if (@value == 1) {
        @attr.type = "Soft";
    } else if (@value == 2) {
        @attr.type = "Hard";
    }
}

class SensingMethodInteroperability as Interoperability("Exif", 0xA217)
{

}

class ExposureBiasValueInteroperability as Interoperability("Exif", 0x9204)
{

}

class ExposureTimeInteroperability as Interoperability("Exif", 0x829A)
{

}

class FNumberInteroperability as Interoperability("Exif", 0x829D)
{

}

class FileSourceInteroperability as Interoperability("Exif", 0xA300)
{
    @attr._valueType = FileSourceValue();
}

class FileSourceValue extends uint(8)
{
    if (@value == 3) {
        @attr.type = "DSC";
    }
}

class InteroperabilityTagInteroperability as Interoperability("Exif", 0xA005)
{

}

class ImageUniqueIDInteroperability as Interoperability("Exif", 0xA420)
{

}

class CameraOwnerNameInteroperability as Interoperability("Exif", 0xA430)
{

}

class ExposureProgramInteroperability as Interoperability("Exif", 0x8822)
{
    @attr._valueType = ExposureProgramValue();
}

class ExposureProgramValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Not defined";
    } else if (@value == 1) {
        @attr.type = "Manual";
    } else if (@value == 2) {
        @attr.type = "Normal program";
    } else if (@value == 3) {
        @attr.type = "Aperture priority";
    } else if (@value == 4) {
        @attr.type = "Shutter priority";
    } else if (@value == 5) {
        @attr.type = "Creative program";
    } else if (@value == 6) {
        @attr.type = "Action Program";
    } else if (@value == 7) {
        @attr.type = "Portrait mode";
    } else if (@value == 8) {
        @attr.type = "Landscape mode";
    }
}

class SpectralSensitivityInteroperability as Interoperability("Exif", 0x8824)
{

}

class UserCommentInteroperability as Interoperability("Exif", 0x9286)
{
    @attr._valueType = UserCommentData(count);
}

class UserCommentData(_count) extends Data(8*count)
{
    String(8) code;
    String payload;
    @value = payload;
}

class ISOSpeedRatingsInteroperability as Interoperability("Exif", 0x8827)
{

}

class OECFInteroperability as Interoperability("Exif", 0x8828)
{
    @attr._valueType = OECFData(count);
}

class OECFData(_count) extends Data(_count)
{
    uint(16) columns;
    uint(16) rows;
    String columnItemNames[columns];
    srational values[columns][rows];
}

class WhiteBalanceInteroperability as Interoperability("Exif", 0xA403)
{
    @attr._valueType = WhiteBalanceValue();
}

class WhiteBalanceValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Auto white balance";
    } else if (@value == 1) {
        @attr.type = "Manual white balance";
    }
}

class MeteringModeInteroperability as Interoperability("Exif", 0x9207)
{
    @attr._valueType = MeteringModeValue();
}

class MeteringModeValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "unknown";
    } else if (@value == 1) {
        @attr.type = "Average";
    } else if (@value == 2) {
        @attr.type = "CenterWeightedAverage";
    } else if (@value == 3) {
        @attr.type = "Spot";
    } else if (@value == 4) {
        @attr.type = "MultiSpot";
    } else if (@value == 5) {
        @attr.type = "Pattern";
    } else if (@value == 6) {
        @attr.type = "Partial";
    } else if (@value == 255) {
        @attr.type = "other";
    }
}

class LensSpecificationInteroperability as Interoperability("Exif", 0xA432)
{

}

class GammaInteroperability as Interoperability("Exif", 0xA500)
{

}

class SensitivityTypeInteroperability as Interoperability("Exif", 0x8830)
{

}

class StandardOutputSensitivityInteroperability as Interoperability("Exif", 0x8831)
{

}

class RecommendedExposureIndexInteroperability as Interoperability("Exif", 0x8832)
{

}

class ISOSpeedInteroperability as Interoperability("Exif", 0x8833)
{

}

class ISOSpeedLatitudeyyyInteroperability as Interoperability("Exif", 0x8834)
{

}

class ISOSpeedLatitudezzzInteroperability as Interoperability("Exif", 0x8835)
{

}

class SaturationInteroperability as Interoperability("Exif", 0xA409)
{
    @attr._valueType = SaturationValue();
}

class SaturationValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Normal";
    } else if (@value == 1) {
        @attr.type = "Low saturation";
    } else if (@value == 2) {
        @attr.type = "High saturation";
    }
}

class LensModelInteroperability as Interoperability("Exif", 0xA434)
{

}

class SceneTypeInteroperability as Interoperability("Exif", 0xA301)
{
    @attr._valueType = SceneTypeValue();
}

class SceneTypeValue extends uint(8)
{
    if (@value == 1) {
        @attr.type = "A directly photographed image";
    }
}

class SharpnessInteroperability as Interoperability("Exif", 0xA40A)
{
    @attr._valueType = SharpnessValue();
}

class SharpnessValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Normal";
    } else if (@value == 1) {
        @attr.type = "Soft";
    } else if (@value == 2) {
        @attr.type = "Hard";
    }
}

class LensSerialNumberInteroperability as Interoperability("Exif", 0xA435)
{

}

class DigitalZoomRatioInteroperability as Interoperability("Exif", 0xA404)
{

}

class PixelXDimensionInteroperability as Interoperability("Exif", 0xA002)
{

}

class DeviceSettingDescriptionInteroperability as Interoperability("Exif", 0xA40B)
{
    @attr._valueType = DeviceSettingData(count);
}

class DeviceSettingData(_count) extends Data(_count)
{
    uint(16) columns;
    uint(16) rows;
    String(columns) values[rows];
}

class CustomRenderedInteroperability as Interoperability("Exif", 0xA401)
{
    @attr._valueType = CustomRenderedValue();
}

class CustomRenderedValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Normal process";
    } else if (@value == 1) {
        @attr.type = "Custom process";
    }
}

class FlashpixVersionInteroperability as Interoperability("Exif", 0xA000)
{
    @attr._valueType = Version();
}

class Version extends String(4)
{
    @value = (ToInt:@value)/100.0;
}

class SubjectDistanceRangeInteroperability as Interoperability("Exif", 0xA40C)
{
    @attr._valueType = SubjectDistanceValue();
}

class SubjectDistanceValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "unknown";
    } else if (@value == 1) {
        @attr.type = "Macro";
    } else if (@value == 2) {
        @attr.type = "Close view";
    } else if (@value == 3) {
        @attr.type = "Distant view";
    }
}

class LensMakeInteroperability as Interoperability("Exif", 0xA433)
{

}

class FocalLengthIn35mmFilmInteroperability as Interoperability("Exif", 0xA405)
{

}

class CFAPatternInteroperability as Interoperability("Exif", 0xA302)
{

}

class ColorSpaceInteroperability as Interoperability("Exif", 0xA001)
{
    @attr._valueType = ColorSpaceValue();
}

class ColorSpaceValue extends uint(16)
{
    if (@value == 1) {
        @attr.type = "sRGB";
    } else if (@value == 0xffff) {
        @attr.type = "Uncalibrated";
    }
}

class PixelYDimensionInteroperability as Interoperability("Exif", 0xA003)
{

}

class FocalPlaneResolutionUnitInteroperability as Interoperability("Exif", 0xA210)
{

}

class ExposureModeInteroperability as Interoperability("Exif", 0xA402)
{
    @attr._valueType = ExposureModeValue();
}

class ExposureModeValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Normal process";
    } else if (@value == 1) {
        @attr.type = "Custom process";
    }
}

class BodySerialNumberInteroperability as Interoperability("Exif", 0xA431)
{

}

class SceneCaptureTypeInteroperability as Interoperability("Exif", 0xA406)
{
    @attr._valueType = SceneCaptureValue();
}

class SceneCaptureValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Standard";
    } else if (@value == 1) {
        @attr.type = "Landscape";
    } else if (@value == 2) {
        @attr.type = "Portrait";
    } else if (@value == 3) {
        @attr.type = "Night scene";
    }
}

class GainControlInteroperability as Interoperability("Exif", 0xA407)
{
    @attr._valueType = GainControlValue();
}

class GainControlValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "None";
    } else if (@value == 1) {
        @attr.type = "Low gain up";
    } else if (@value == 2) {
        @attr.type = "High gain up";
    } else if (@value == 3) {
        @attr.type = "Low gain down";
    } else if (@value == 4) {
        @attr.type = "High gain down";
    }
}

class SubjectLocationInteroperability as Interoperability("Exif", 0xA214)
{

}

class MakerNoteInteroperability as Interoperability("Exif", 0x927C)
{

}

class RelatedSoundFileInteroperability as Interoperability("Exif", 0xA004)
{

}

class GPSVersionIDInteroperability as Interoperability("GPS", 0x0000)
{

}

class GPSLatitudeRefInteroperability as Interoperability("GPS", 0x0001)
{

}

class GPSLatitudeInteroperability as Interoperability("GPS", 0x0002)
{

}

class GPSLongitudeRefInteroperability as Interoperability("GPS", 0x0003)
{

}

class GPSLongitudeInteroperability as Interoperability("GPS", 0x0004)
{

}

class GPSAltitudeRefInteroperability as Interoperability("GPS", 0x0005)
{
    @attr._valueType = GPSAltitudeRefValue();
}

class GPSAltitudeRefValue extends uint(16)
{
    if (@value == 0) {
        @attr.type = "Sea level";
    } else if (@value == 1) {
        @attr.type = "Sea level reference (negative value)";
    }
}

class GPSAltitudeInteroperability as Interoperability("GPS", 0x0006)
{

}

class GPSTimeStampInteroperability as Interoperability("GPS", 0x0007)
{

}

class GPSSatellitesInteroperability as Interoperability("GPS", 0x0008)
{

}

class GPSStatusInteroperability as Interoperability("GPS", 0x0009)
{

}

class GPSMeasureModeInteroperability as Interoperability("GPS", 0x000A)
{

}

class GPSDOPInteroperability as Interoperability("GPS", 0x000B)
{

}

class GPSSpeedRefInteroperability as Interoperability("GPS", 0x000C)
{

}

class GPSSpeedInteroperability as Interoperability("GPS", 0x000D)
{

}

class GPSTrackRefInteroperability as Interoperability("GPS", 0x000E)
{

}

class GPSTrackInteroperability as Interoperability("GPS", 0x000F)
{

}

class GPSImgDirectionRefInteroperability as Interoperability("GPS", 0x0010)
{

}

class GPSImgDirectionInteroperability as Interoperability("GPS", 0x0011)
{

}

class GPSMapDatumInteroperability as Interoperability("GPS", 0x0012)
{

}

class GPSDestLatitudeRefInteroperability as Interoperability("GPS", 0x0013)
{

}

class GPSDestLatitudeInteroperability as Interoperability("GPS", 0x0014)
{

}

class GPSDestLongitudeRefInteroperability as Interoperability("GPS", 0x0015)
{

}

class GPSDestLongitudeInteroperability as Interoperability("GPS", 0x0016)
{

}

class GPSDestBearingRefInteroperability as Interoperability("GPS", 0x0017)
{

}

class GPSDestBearingInteroperability as Interoperability("GPS", 0x0018)
{

}

class GPSDestDistanceRefInteroperability as Interoperability("GPS", 0x0019)
{

}

class GPSDestDistanceInteroperability as Interoperability("GPS", 0x001A)
{

}

class GPSProcessingMethodInteroperability as Interoperability("GPS", 0x001B)
{

}

class GPSAreaInformationInteroperability as Interoperability("GPS", 0x001C)
{

}

class GPSDateStampInteroperability as Interoperability("GPS", 0x001D)
{

}

class GPSDifferentialInteroperability as Interoperability("GPS", 0x001E)
{

}

class GPSHPositioningErrorInteroperability as Interoperability("GPS", 0x001F)
{

}

class InteroperabilityIndexInteroperability as Interoperability("Interop", 0x0001)
{

}

