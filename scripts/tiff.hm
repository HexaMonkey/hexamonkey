//This file is part of the HexaMonkey project, a multimedia analyser
//Copyright (C) 2013  Sevan Drapeau-Martin, Nicolas Fleury

//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either version 2
//of the License, or (at your option) any later version.

//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

addMagicNumber 49 49 2A 00
addMagicNumber 4D 4D 00 2A

addExtension tif
addExtension tiff 

class TiffFile as File,
      TiffData(_size) extends Data(_size)
{
    @context.interabilityReferenceBase = @beginningPos;
    TiffHeader _header;
    
    var offsetOfInteroperability = _header.OffsetOfInteroperability;
    for (var i = 0; offsetOfInteroperability != 0; ++i) {
        @pos = 8*offsetOfInteroperability;
        IFD("Image") ("IFD"+i);
        offsetOfInteroperability = self[].NextInteroperabilityIndex;

        //handle chunks;
        chunks := self[].@context._chunks;
        if (chunks != undefined) {
            @pos = 8*chunks.offset;
            ChunkData(chunks.type, chunks.count, chunks.length, i) ("Strip"+i);
        }
        
        
        @pos = 0;
    }
}

class TiffHeader
{
    String(2) byteOrder;
    
    if (byteOrder == "II") {
        @endianness = @parent.@endianness = "littleEndian";
    } else if (byteOrder == "MM"){
        @endianness = @parent.@endianness = "bigEndian";
    } else {
        Error:("Unrecognized byte order");
    }
    uint(16) n42;
    uint(32) OffsetOfInteroperability;
}

class IFD(namespace)
{
    chunks := @context._chunks := {};

    uint(16) NumberOfInteroperability;
    for (var i = 0, n = NumberOfInteroperability; i < n; ++i) {
        Interoperability(@args.namespace) _;
    }
    uint(32) NextInteroperabilityIndex;
    for (var i = 0, n = NumberOfInteroperability; i < n; ++i) {
        interoperability := self[1+i];
        if (interoperability.@linkTo) {
            @absPos = interoperability.@linkTo;
            (interoperability.@attr._valueType) _;
            interoperability.@value = _.@value;
            type := self[1+i].@type;
            self[].@attr.valueFor = type;
            
            var typeName = type.@name;
            if (typeName == "StripOffsetsInteroperability" 
             || typeName == "TileOffsetsInteroperability") {
                chunks.type = typeName == "StripOffsetsInteroperability" ? "strip" : "tile";
              
                chunks.count = self[1+i].count;
                stripOffsets := chunks.offsets := self[];
            } else if (typeName == "StripByteCountsInteroperability"
                    || typeName == "TileByteCountsInteroperability") {
                stripLengths := chunks.lengths := self[];
            }
        }
    }
    
    //compute chunks min and max index
    var n = chunks.count;

    if (chunks.count) {
        var min = 0xffffffff;
        var max = 0;
        for (var i = 0; i < n; ++i) {
            var offset = stripOffsets[i];
            if (offset < min) {
                min = offset;
            }
            if (offset >= max) {
                max = offset + stripLengths[i];
            }
        }
        chunks.offset = min;
        chunks.length = max - min;
    } else {
        delete @context._chunks;
    }
}

virtual class Interoperability(namespace, tag) extends Data(96)
{
    uint(16, 16) tag;
    @args.tag = tag;
    uint(16, 16) type;
    uint(32) count;
    
    typeMap := @global.typeMap;
    if (typeMap == undefined) {
        typeMap := @global.typeMap := {};
    
        typeMap[1]  = uint(8);     // BYTE
        typeMap[2]  = String(1);   // ASCII
        typeMap[3]  = uint(16);    // SHORT
        typeMap[4]  = uint(32);    // LONG
        typeMap[5]  = rational();  // RATIONAL
        typeMap[7]  = Data(8);     // UNDEFINED
        typeMap[9]  = int(32);     // SLONG
        typeMap[10] = srational(); // SRATIONAL
        typeMap[11] = float();     // FLOAT
        typeMap[12] = double();    // DOUBLE
    }
    
    var valueType = typeMap[type];
    if (count != 1) {
        if (type == 2) {//ASCII
            valueType = String(count);
        } else if (type == 7) {
            valueType = Data(8*count);
        } else {
            valueType = Tuple(valueType, count);
        }
    }
    @attr._valueType = valueType;
    
    ...
    valueType = @attr._valueType;
    var valueSize = SizeOf:(valueType);
    if (valueSize > @rem) {
        uint(32) valueOffset;
        @linkTo = @context.interabilityReferenceBase + 8 * valueOffset;
    } else {
        (valueType) value;
        @value = value;
        if (value.@attr.type) {
            @attr.type = value.@attr.type;
        }
        if (@rem) {
            Data(@rem) padding;
        }
    }    
}

virtual class ChunkData(type, count, _size, _i) extends Data(8*_size)
{
    var interabilityReferenceBase = @context.interabilityReferenceBase;
    chunks := @parent["IFD"+_i].@context._chunks;
    offsets := chunks.offsets;
    lengths := chunks.lengths;
    for (var i = 0; i < count; ++i) {
        @absPos = interabilityReferenceBase + 8 * offsets[i];
        Data(8*lengths[i]) #;
        @pos = 0;
    }
}

class StripData(count, _size, _i) as ChunkData("strip", count, _size, i)
class TileData(count, _size, _i) as ChunkData("tile", count, _size, i)



class rational 
{
    uint(32) numerator;
    uint(32) denominator;
    @value = numerator / denominator;
}

class srational 
{
    int(32) numerator;
    int(32) denominator;
    @value = numerator / denominator;
}

class ProcessingSoftwareInteroperability as Interoperability("Image", 0x000B)
{

}

class ImageIDInteroperability as Interoperability("Image", 0x800D)
{

}

class GPSTagInteroperability as Interoperability("Image", 0x8825)
{

}

class InterlaceInteroperability as Interoperability("Image", 0x8829)
{

}

class TimeZoneOffsetInteroperability as Interoperability("Image", 0x882A)
{

}

class SelfTimerModeInteroperability as Interoperability("Image", 0x882B)
{

}

class DNGVersionInteroperability as Interoperability("Image", 0xC612)
{

}

class ImageNumberInteroperability as Interoperability("Image", 0x9211)
{

}

class SecurityClassificationInteroperability as Interoperability("Image", 0x9212)
{

}

class YCbCrPositioningInteroperability as Interoperability("Image", 0x0213)
{
    @attr._valueType = YCbCrPositioniningValue();
}

class YCbCrPositioniningValue extends uint(16)
{
    if (@value == 1) {
        @attr.type = "centered";
    } else if (@value == 2) {
        @attr.type = "co-sited";
    }
}

class UniqueCameraModelInteroperability as Interoperability("Image", 0xC614)
{

}

class LocalizedCameraModelInteroperability as Interoperability("Image", 0xC615)
{

}

class CFAPlaneColorInteroperability as Interoperability("Image", 0xC616)
{

}

class CFALayoutInteroperability as Interoperability("Image", 0xC617)
{

}

class XPTitleInteroperability as Interoperability("Image", 0x9C9B)
{

}

class XPCommentInteroperability as Interoperability("Image", 0x9C9C)
{

}

class XPAuthorInteroperability as Interoperability("Image", 0x9C9D)
{

}

class XPKeywordsInteroperability as Interoperability("Image", 0x9C9E)
{

}

class XPSubjectInteroperability as Interoperability("Image", 0x9C9F)
{

}

class PrintImageMatchingInteroperability as Interoperability("Image", 0xC4A5)
{

}

class NewSubfileTypeInteroperability as Interoperability("Image", 0x00FE)
{

}

class SubfileTypeInteroperability as Interoperability("Image", 0x00FF)
{

}

class ImageWidthInteroperability as Interoperability("Image", 0x0100)
{

}

class ImageLengthInteroperability as Interoperability("Image", 0x0101)
{

}

class BitsPerSampleInteroperability as Interoperability("Image", 0x0102)
{

}

class CompressionInteroperability as Interoperability("Image", 0x0103)
{
    @attr._valueType = CompressionValue();
}

class CompressionValue extends uint(16)
{
    if (@value == 1) {
        @attr.type = "uncompressed";
    } else if (@value == 6) {
        @attr.type = "JPEG compression";
    }
}

class PhotometricInterpretationInteroperability as Interoperability("Image", 0x0106)
{
    @attr._valueType = PhotometricInterpretationValue();
}

class PhotometricInterpretationValue extends uint(16)
{
    if (@value == 2) {
        @attr.type = "RGB";
    } else if (@value == 6) {
        @attr.type = "YCbCr";
    }
}

class ThreshholdingInteroperability as Interoperability("Image", 0x0107)
{

}

class CellWidthInteroperability as Interoperability("Image", 0x0108)
{

}

class CellLengthInteroperability as Interoperability("Image", 0x0109)
{

}

class FillOrderInteroperability as Interoperability("Image", 0x010A)
{

}

class DocumentNameInteroperability as Interoperability("Image", 0x010D)
{

}

class ImageDescriptionInteroperability as Interoperability("Image", 0x010E)
{

}

class MakeInteroperability as Interoperability("Image", 0x010F)
{

}

class ModelInteroperability as Interoperability("Image", 0x0110)
{

}

class StripOffsetsInteroperability as Interoperability("Image", 0x0111)
{

}

class OrientationInteroperability as Interoperability("Image", 0x0112)
{
    @attr._valueType = OrientationValue();
}

class OrientationValue extends uint(16)
{
    if (@value == 1) {
        @attr.type = "top-left";
    } else if (@value == 2) {
        @attr.type = "top-right";
    } else if (@value == 3) {
        @attr.type = "bottom-right";
    } else if (@value == 4) {
        @attr.type = "bottom-left";
    } else if (@value == 5) {
        @attr.type = "left-top";
    } else if (@value == 6) {
        @attr.type = "right-top";
    } else if (@value == 7) {
        @attr.type = "right-bottom";
    } else if (@value == 8) {
        @attr.type = "left-bottom";
    }
}

class SamplesPerPixelInteroperability as Interoperability("Image", 0x0115)
{

}

class RowsPerStripInteroperability as Interoperability("Image", 0x0116)
{

}

class StripByteCountsInteroperability as Interoperability("Image", 0x0117)
{

}

class XResolutionInteroperability as Interoperability("Image", 0x011A)
{

}

class YResolutionInteroperability as Interoperability("Image", 0x011B)
{

}

class PlanarConfigurationInteroperability as Interoperability("Image", 0x011C)
{
    @attr._valueType = PlanarConfigurationValue();
}

class PlanarConfigurationValue extends uint(16)
{
    if (@value == 1) {
        @attr.type = "chunky format";
    } else if (@value == 2) {
        @attr.type = "planar format";
    }
}

class GrayResponseUnitInteroperability as Interoperability("Image", 0x0122)
{

}

class GrayResponseCurveInteroperability as Interoperability("Image", 0x0123)
{

}

class T4OptionsInteroperability as Interoperability("Image", 0x0124)
{

}

class T6OptionsInteroperability as Interoperability("Image", 0x0125)
{

}

class ResolutionUnitInteroperability as Interoperability("Image", 0x0128)
{
    @attr._valueType = ResolutionUnitValue();
}

class ResolutionUnitValue extends uint(16)
{
    if (@value == 2) {
        @attr.type = "inches";
    } else if (@value == 3) {
        @attr.type = "centimeters";
    }
}

class TransferFunctionInteroperability as Interoperability("Image", 0x012D)
{

}

class SoftwareInteroperability as Interoperability("Image", 0x0131)
{

}

class DateTimeInteroperability as Interoperability("Image", 0x0132)
{

}

class ArtistInteroperability as Interoperability("Image", 0x013B)
{

}

class HostComputerInteroperability as Interoperability("Image", 0x013C)
{

}

class PredictorInteroperability as Interoperability("Image", 0x013D)
{

}

class WhitePointInteroperability as Interoperability("Image", 0x013E)
{

}

class PrimaryChromaticitiesInteroperability as Interoperability("Image", 0x013F)
{

}

class ColorMapInteroperability as Interoperability("Image", 0x0140)
{

}

class HalftoneHintsInteroperability as Interoperability("Image", 0x0141)
{

}

class TileWidthInteroperability as Interoperability("Image", 0x0142)
{

}

class TileLengthInteroperability as Interoperability("Image", 0x0143)
{

}

class TileOffsetsInteroperability as Interoperability("Image", 0x0144)
{

}

class TileByteCountsInteroperability as Interoperability("Image", 0x0145)
{

}

class SubIFDsInteroperability as Interoperability("Image", 0x014A)
{

}

class InkSetInteroperability as Interoperability("Image", 0x014C)
{

}

class InkNamesInteroperability as Interoperability("Image", 0x014D)
{

}

class NumberOfInksInteroperability as Interoperability("Image", 0x014E)
{

}

class DotRangeInteroperability as Interoperability("Image", 0x0150)
{

}

class TargetPrinterInteroperability as Interoperability("Image", 0x0151)
{

}

class ExtraSamplesInteroperability as Interoperability("Image", 0x0152)
{

}

class SampleFormatInteroperability as Interoperability("Image", 0x0153)
{

}

class SMinSampleValueInteroperability as Interoperability("Image", 0x0154)
{

}

class SMaxSampleValueInteroperability as Interoperability("Image", 0x0155)
{

}

class TransferRangeInteroperability as Interoperability("Image", 0x0156)
{

}

class ClipPathInteroperability as Interoperability("Image", 0x0157)
{

}

class XClipPathUnitsInteroperability as Interoperability("Image", 0x0158)
{

}

class YClipPathUnitsInteroperability as Interoperability("Image", 0x0159)
{

}

class IndexedInteroperability as Interoperability("Image", 0x015A)
{

}

class JPEGTablesInteroperability as Interoperability("Image", 0x015B)
{

}

class OPIProxyInteroperability as Interoperability("Image", 0x015F)
{

}

class JPEGProcInteroperability as Interoperability("Image", 0x0200)
{

}

class JPEGInterchangeFormatInteroperability as Interoperability("Image", 0x0201)
{

}

class JPEGInterchangeFormatLengthInteroperability as Interoperability("Image", 0x0202)
{

}

class JPEGRestartIntervalInteroperability as Interoperability("Image", 0x0203)
{

}

class JPEGLosslessPredictorsInteroperability as Interoperability("Image", 0x0205)
{

}

class JPEGPointTransformsInteroperability as Interoperability("Image", 0x0206)
{

}

class JPEGQTablesInteroperability as Interoperability("Image", 0x0207)
{

}

class JPEGDCTablesInteroperability as Interoperability("Image", 0x0208)
{

}

class JPEGACTablesInteroperability as Interoperability("Image", 0x0209)
{

}

class FlashEnergyInteroperability as Interoperability("Image", 0x920B)
{

}

class SpatialFrequencyResponseInteroperability as Interoperability("Image", 0x920C)
{
    @attr._valueType = SpatialFrequencyData(count);
}

class SpatialFrequencyData(_count) extends Data(_count)
{
    uint(16) columns;
    uint(16) rows;
    String columnItemNames[columns];
    srational values[columns][rows];
}

class NoiseInteroperability as Interoperability("Image", 0x920D)
{

}

class FocalPlaneXResolutionInteroperability as Interoperability("Image", 0x920E)
{

}

class FocalPlaneYResolutionInteroperability as Interoperability("Image", 0x920F)
{

}

class FocalPlaneResolutionUnitInteroperability as Interoperability("Image", 0x9210)
{

}

class YCbCrCoefficientsInteroperability as Interoperability("Image", 0x0211)
{

}

class YCbCrSubSamplingInteroperability as Interoperability("Image", 0x0212)
{
    @attr._valueType = YCbCrSubSamplingValue();
}

class YCbCrSubSamplingValue extends Tuple(uint(16), 2)
{
    if (self[0].@value == 2) {
        if (self[1].@value == 1) {
            @attr.type = "YCbCr4:2:2";
        } else if (self[1].@value == 2) {
            @attr.type = "YCbCr4:2:0";
        }
    }
}

class DNGBackwardVersionInteroperability as Interoperability("Image", 0xC613)
{

}

class ReferenceBlackWhiteInteroperability as Interoperability("Image", 0x0214)
{

}

class ExposureIndexInteroperability as Interoperability("Image", 0x9215)
{

}

class TIFFEPStandardIDInteroperability as Interoperability("Image", 0x9216)
{

}

class SensingMethodInteroperability as Interoperability("Image", 0x9217)
{
    @attr._valueType = SensingMethodValue();
}

class SensingMethodValue extends uint(16)
{
    if (@value == 1) {
        @attr.type = "Not defined";
    } else if (@value == 2) {
        @attr.type = "One-chip area sensor";
    } else if (@value == 3) {
        @attr.type = "Two-chip area sensor";
    } else if (@value == 4) {
        @attr.type = "Three-chip area sensor";
    } else if (@value == 5) {
        @attr.type = "Color sequential area sensor";
    } else if (@value == 7) {
        @attr.type = "Trilinear sensor";
    } else if (@value == 8) {
        @attr.type = "Color sequential linear sensor";
    }
}

class LinearizationTableInteroperability as Interoperability("Image", 0xC618)
{

}

class BlackLevelRepeatDimInteroperability as Interoperability("Image", 0xC619)
{

}

class BlackLevelInteroperability as Interoperability("Image", 0xC61A)
{

}

class BlackLevelDeltaHInteroperability as Interoperability("Image", 0xC61B)
{

}

class BlackLevelDeltaVInteroperability as Interoperability("Image", 0xC61C)
{

}

class WhiteLevelInteroperability as Interoperability("Image", 0xC61D)
{

}

class DefaultScaleInteroperability as Interoperability("Image", 0xC61E)
{

}

class DefaultCropOriginInteroperability as Interoperability("Image", 0xC61F)
{

}

class DefaultCropSizeInteroperability as Interoperability("Image", 0xC620)
{

}

class ColorMatrix1Interoperability as Interoperability("Image", 0xC621)
{

}

class ColorMatrix2Interoperability as Interoperability("Image", 0xC622)
{

}

class CameraCalibration1Interoperability as Interoperability("Image", 0xC623)
{

}

class CameraCalibration2Interoperability as Interoperability("Image", 0xC624)
{

}

class ReductionMatrix1Interoperability as Interoperability("Image", 0xC625)
{

}

class ReductionMatrix2Interoperability as Interoperability("Image", 0xC626)
{

}

class AnalogBalanceInteroperability as Interoperability("Image", 0xC627)
{

}

class AsShotNeutralInteroperability as Interoperability("Image", 0xC628)
{

}

class AsShotWhiteXYInteroperability as Interoperability("Image", 0xC629)
{

}

class BaselineExposureInteroperability as Interoperability("Image", 0xC62A)
{

}

class BaselineNoiseInteroperability as Interoperability("Image", 0xC62B)
{

}

class BaselineSharpnessInteroperability as Interoperability("Image", 0xC62C)
{

}

class BayerGreenSplitInteroperability as Interoperability("Image", 0xC62D)
{

}

class LinearResponseLimitInteroperability as Interoperability("Image", 0xC62E)
{

}

class CameraSerialNumberInteroperability as Interoperability("Image", 0xC62F)
{

}

class LensInfoInteroperability as Interoperability("Image", 0xC630)
{

}

class ChromaBlurRadiusInteroperability as Interoperability("Image", 0xC631)
{

}

class AntiAliasStrengthInteroperability as Interoperability("Image", 0xC632)
{

}

class ShadowScaleInteroperability as Interoperability("Image", 0xC633)
{

}

class DNGPrivateDataInteroperability as Interoperability("Image", 0xC634)
{

}

class MakerNoteSafetyInteroperability as Interoperability("Image", 0xC635)
{

}

class ImageResourcesInteroperability as Interoperability("Image", 0x8649)
{

}

class CalibrationIlluminant1Interoperability as Interoperability("Image", 0xC65A)
{

}

class CalibrationIlluminant2Interoperability as Interoperability("Image", 0xC65B)
{

}

class BestQualityScaleInteroperability as Interoperability("Image", 0xC65C)
{

}

class RawDataUniqueIDInteroperability as Interoperability("Image", 0xC65D)
{

}

class OriginalRawFileNameInteroperability as Interoperability("Image", 0xC68B)
{

}

class OriginalRawFileDataInteroperability as Interoperability("Image", 0xC68C)
{

}

class CFARepeatPatternDimInteroperability as Interoperability("Image", 0x828D)
{

}

class CFAPatternInteroperability as Interoperability("Image", 0x828E)
{
    @attr._valueType = CFAPatternData(count);
}

class CFAPatternData(_count) extends Data(_count)
{
    uint(16) columns;
    uint(16) rows;
    CFAValue values[columns][rows];
}

class CFAValue extends uint(8)
{
    if (@value == 0) {
        @attr.type = "RED";
    } else if (@value == 1) {
        @attr.type = "GREEN";
    } else if (@value == 2) {
        @attr.type = "BLUE";
    } else if (@value == 3) {
        @attr.type = "CYAN";
    } else if (@value == 4) {
        @attr.type = "MAGENTA";
    } else if (@value == 5) {
        @attr.type = "YELLOW";
    } else if (@value == 6) {
        @attr.type = "WHITE";
    }
}

class BatteryLevelInteroperability as Interoperability("Image", 0x828F)
{

}

class AsShotPreProfileMatrixInteroperability as Interoperability("Image", 0xC690)
{

}

class CurrentICCProfileInteroperability as Interoperability("Image", 0xC691)
{

}

class CurrentPreProfileMatrixInteroperability as Interoperability("Image", 0xC692)
{

}

class CopyrightInteroperability as Interoperability("Image", 0x8298)
{
    @attr._valueType = CopyrightStrings(count);
}

class CopyrightStrings(count) extends Data(8*count)
{
    @value = "";
    while(1) {
        String #;
        @value += self[];
        if (@rem) {
            @value += ";"; 
        }
    }
}

class ExposureTimeInteroperability as Interoperability("Image", 0x829A)
{

}

class XMLPacketInteroperability as Interoperability("Image", 0x02BC)
{

}

class ColorimetricReferenceInteroperability as Interoperability("Image", 0xC6BF)
{

}

class ImageHistoryInteroperability as Interoperability("Image", 0x9213)
{

}

class CameraCalibrationSignatureInteroperability as Interoperability("Image", 0xC6F3)
{

}

class ProfileCalibrationSignatureInteroperability as Interoperability("Image", 0xC6F4)
{

}

class AsShotProfileNameInteroperability as Interoperability("Image", 0xC6F6)
{

}

class NoiseReductionAppliedInteroperability as Interoperability("Image", 0xC6F7)
{

}

class ProfileNameInteroperability as Interoperability("Image", 0xC6F8)
{

}

class ProfileHueSatMapDimsInteroperability as Interoperability("Image", 0xC6F9)
{

}

class ProfileHueSatMapData1Interoperability as Interoperability("Image", 0xC6FA)
{

}

class ProfileHueSatMapData2Interoperability as Interoperability("Image", 0xC6FB)
{

}

class ProfileToneCurveInteroperability as Interoperability("Image", 0xC6FC)
{

}

class ProfileEmbedPolicyInteroperability as Interoperability("Image", 0xC6FD)
{

}

class ProfileCopyrightInteroperability as Interoperability("Image", 0xC6FE)
{

}

class ForwardMatrix1Interoperability as Interoperability("Image", 0xC714)
{

}

class ForwardMatrix2Interoperability as Interoperability("Image", 0xC715)
{

}

class PreviewApplicationNameInteroperability as Interoperability("Image", 0xC716)
{

}

class PreviewApplicationVersionInteroperability as Interoperability("Image", 0xC717)
{

}

class PreviewSettingsNameInteroperability as Interoperability("Image", 0xC718)
{

}

class PreviewSettingsDigestInteroperability as Interoperability("Image", 0xC719)
{

}

class PreviewColorSpaceInteroperability as Interoperability("Image", 0xC71A)
{

}

class PreviewDateTimeInteroperability as Interoperability("Image", 0xC71B)
{

}

class RawImageDigestInteroperability as Interoperability("Image", 0xC71C)
{

}

class OriginalRawFileDigestInteroperability as Interoperability("Image", 0xC71D)
{

}

class SubTileBlockSizeInteroperability as Interoperability("Image", 0xC71E)
{

}

class RowInterleaveFactorInteroperability as Interoperability("Image", 0xC71F)
{

}

class ProfileLookTableDimsInteroperability as Interoperability("Image", 0xC725)
{

}

class ProfileLookTableDataInteroperability as Interoperability("Image", 0xC726)
{

}

class OpcodeList1Interoperability as Interoperability("Image", 0xC740)
{

}

class OpcodeList2Interoperability as Interoperability("Image", 0xC741)
{

}

class RatingInteroperability as Interoperability("Image", 0x4746)
{

}

class RatingPercentInteroperability as Interoperability("Image", 0x4749)
{

}

class OpcodeList3Interoperability as Interoperability("Image", 0xC74E)
{

}

class ActiveAreaInteroperability as Interoperability("Image", 0xC68D)
{

}

class MaskedAreasInteroperability as Interoperability("Image", 0xC68E)
{

}

class AsShotICCProfileInteroperability as Interoperability("Image", 0xC68F)
{

}

class ExifTagInteroperability as Interoperability("Image", 0x8769)
{

}

class InterColorProfileInteroperability as Interoperability("Image", 0x8773)
{

}