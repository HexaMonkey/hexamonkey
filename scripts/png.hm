//This file is part of the HexaMonkey project, a multimedia analyser
//Copyright (C) 2013  Sevan Drapeau-Martin, Nicolas Fleury

//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either version 2
//of the License, or (at your option) any later version.

//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

addMagicNumber 89 50 4e 47 0d 0a 1a 0a
addExtension png

import rgb

class PngFile as File
{
	@endianness = "bigEndian";

	byte signature[8];
	while(1) Chunk *;
}

virtual class Chunk(code)
{
	uint(32)  length;
	String(4) type;
	@size = 8*length + 96;
	@args.code = type;
	...
	@pos = @size - 32;
	uint(32,16) CRC;
}

class ImageHeader as Chunk("IHDR")
{
	uint(32) width;
	uint(32) height;
	uint(8)  bitDepth;
	uint(8)  colorType;
	uint(8)  compressionMethod;
	uint(8)  filterMethod;
	uint(8)  interlaceMethod;
}

class ImageData as Chunk("IDAT")
{
	Data(8*length) imageData; 
}

class ImageTrailer as Chunk("IEND")
{
}

class Palette as Chunk("PLTE")
{
	RGB colors[length/3];
}

class Transparency as Chunk("tRNS")
{
	var colorType = @parent[ImageHeader()].colorType;
	if(colorType == 3) {
		uint(8) alphas[length];
	} else if (colorType == 0){
		uint(16) gray;
	} else if (colorType == 2){
		uint(16) red;
		uint(16) green;
		uint(16) blue;
	} 
}

class FixedPoint extends uint(32)
{
	@value /= 100000.0;
}

class Gamma as Chunk("gAMA")
{
	FixedPoint gamma;
}

class PrimaryChromaticities as Chunk("cHRM")
{
	FixedPoint whitePointX;
	FixedPoint whitePointY;
	FixedPoint RedX;
	FixedPoint RedY;
	FixedPoint GreenX;
	FixedPoint GreenY;
	FixedPoint BlueX;
	FixedPoint BlueY;
}

class RGBColorSpace as Chunk("sRGB")
{
	uint(8) renderingIntent;
}

class EmbeddedICCProfile as Chunk("iCCP")
{
	String          profileName;
	uint(8)         compressionMethod;
	Data(@rem - 32) compressedProfile;
}

class CompressedTextualData as Chunk("tEXt")
{
	String                keyword;
	String((@rem - 32)/8) text;
}

class CompressedTextualData as Chunk("zTXt")
{
	String          keyword;
	uint(8)         compressionMethod;
	Data(@rem - 32) compressedText;
}

class InternationalTextualData as Chunk("iTXt")
{
	String  keyword;
	uint(8) compresionFlag;
	uint(8) compressionMethod;
	String  languageTag;
	String  translatedKeyWord;
	if(compressionFlag) {
		Data((@rem - 32)/8) text;
	} else {
		String((@rem - 32)/8) text;
	}
}

class BackgroundColor as Chunk("bKGD")
{
	var colorType = @parent[ImageHeader()].colorType;
	if(colorType == 3) {
		uint(8) paletteIndex;
	} else if (colorType == 0 || colorType == 4) {
		uint(16) gray;
	} else if (colorType == 2 || colorType == 6) {
		uint(16) red;
		uint(16) green;
		uint(16) blue;
	} 
}

class PhysicalPixelDimensions as Chunk("pHYs")
{
	uint(32) pixelsPerUnitX;
	uint(32) pixelsPerUnitY;
	uint(8)  unitSpecifier;
}

class SignificatBits as Chunk("sBIT")
{
	var colorType = @parent[ImageHeader()].colorType;
	if(colorType == 0) {
		uint(8) gray;
	} else if (colorType == 2 || colorType == 3) {
		uint(8) red;
		uint(8) green;
		uint(8) blue;
	} else if (colorType == 4) {
		uint(8) gray;
		uint(8) alpha;
	}  else if (colorType == 6) {
		uint(8) red;
		uint(8) green;
		uint(8) blue;
		uint(8) alpha;
	}
}

class PaletteEntry
{
	uint(8)            sampleDepth;
	uint(sampleDepth)  red;
	uint(sampleDepth)  green;
	uint(sampleDepth)  blue;
	uint(16)           frequency;
}

class SuggestedPalette as Chunk("sPLT")
{
	String  paletteName;
	
	Array(PaletteEntry, @rem - 32) entries;
}

class PaletteHistogram as Chunk("hIST")
{
	uint(16) frequencies[length/2];
}

class ImageLastModificationTime as Chunk("tIME")
{
	uint(16) year;
	uint(8)  month;
	uint(8)  day;
	uint(8)  hour;
	uint(8)  minute;
	uint(8)  second;
	
	@value = year+"-"+month+"-"+day+" "+hour+":"+minute+":"+second;
}

class VirtualPage as Chunk("vpAg")
{
	uint(32) width;
	uint(32) height;
	uint(8)  unit;
}
