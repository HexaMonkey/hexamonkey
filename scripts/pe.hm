//This file is part of the HexaMonkey project, a multimedia analyser
//Copyright (C) 2013  Sevan Drapeau-Martin, Nicolas Fleury

//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either version 2
//of the License, or (at your option) any later version.

//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

addMagicNumber 4d 5a
addExtension exe

import microsoft

class PEFile as File
{
	@endianness = "littleEndian";

	IMAGE_DOS_HEADER _dos_header;
	IMAGE_DOS_SEGMENT((_dos_header.e_lfanew<<3)-@pos) _dos_segment;
	IMAGE_NT_HEADERS _nt_header;
	IMAGE_SECTION_HEADER _section_headers[_nt_header.FileHeader.NumberOfSections];
	IMAGE_SECTIONS(_nt_header.FileHeader.NumberOfSections) _image_sections;
}

class IMAGE_DOS_HEADER {      // DOS .EXE header
	WORD   e_magic;                     // Magic number
    WORD   e_cblp;                      // Bytes on last page of file
    WORD   e_cp;                        // Pages in file
    WORD   e_crlc;                      // Relocations
    WORD   e_cparhdr;                   // Size of header in paragraphs
    WORD   e_minalloc;                  // Minimum extra paragraphs needed
    WORD   e_maxalloc;                  // Maximum extra paragraphs needed
    WORD   e_ss;                        // Initial (relative) SS value
    WORD   e_sp;                        // Initial SP value
    WORD   e_csum;                      // Checksum
    WORD   e_ip;                        // Initial IP value
    WORD   e_cs;                        // Initial (relative) CS value
    WORD   e_lfarlc;                    // File address of relocation table
    WORD   e_ovno;                      // Overlay number
    WORD   e_res[4];                    // Reserved words
    WORD   e_oemid;                     // OEM identifier (for e_oeminfo)
    WORD   e_oeminfo;                   // OEM information; e_oemid specific
    WORD   e_res2[10];                  // Reserved words
    LONG   e_lfanew;                    // File address of new exe header
}

class IMAGE_DOS_SEGMENT(_size) extends Data(_size) 

class IMAGE_NT_HEADERS 
{
  DWORD                 Signature;
  IMAGE_FILE_HEADER     FileHeader;
  if (FileHeader.SizeOfOptionalHeader) {
	IMAGE_OPTIONAL_HEADER OptionalHeader;
  }
}

class ADDRESS extends DWORD(16)
{
	if (@value) {
		@linkTo = 8*@value;
	}
}

class RVA extends DWORD(16)
{
	if (@value) {
		var offset = @context.currentOffset;
		if (offset) {
			@linkTo = offset + 8*@value;
		} else {
			@linkTo = 8*@value;
		}
	}
}

class OFFSET extends DWORD(16)

class IMAGE_FILE_HEADER {
  IMAGE_FILE_MACHINE  Machine;
  WORD                NumberOfSections;
  DWORD               TimeDateStamp;      
  ADDRESS             PointerToSymbolTable;
  DWORD               NumberOfSymbols;
  WORD                SizeOfOptionalHeader;
  WORD                Characteristics;
}

class IMAGE_FILE_MACHINE extends WORD
{
	if (@value == 0x014c) {
		@attr[] = '"x86"';
	} else if (@value == 0x0200) {
		@attr[] = '"Intel Itanium"';
	} else if (@value == 0x8664) {
		@attr[] = '"x64"';
	}
}

class IMAGE_OPTIONAL_HEADER 
{
	WORD   Magic;
	var HDR64 = @global.HDR64 = (Magic == 0x20b);
	BYTE   MajorLinkerVersion;
	BYTE   MinorLinkerVersion;
	OFFSET  SizeOfCode;
	OFFSET  SizeOfInitializedData;
	OFFSET  SizeOfUninitializedData;
	OFFSET  AddressOfEntryPoint;
	OFFSET  BaseOfCode;
	if (HDR64) {
		ULONGLONG  ImageBase;
	} else {
		DWORD  BaseOfData;
		DWORD  ImageBase;
	}
	DWORD  SectionAlignment;
	DWORD  FileAlignment;
	WORD   MajorOperatingSystemVersion;
	WORD   MinorOperatingSystemVersion;
	WORD   MajorImageVersion;
	WORD   MinorImageVersion;
	WORD   MajorSubsystemVersion;
	WORD   MinorSubsystemVersion;
	DWORD  Win32VersionValue;
	DWORD  SizeOfImage;
	DWORD  SizeOfHeaders;
	DWORD  CheckSum;
	WORD   Subsystem;
	WORD   DllCharacteristics;
	
	var SIZE_TYPE = (HDR64 ? ULONGLONG(16) : DWORD(16));
	(SIZE_TYPE)  SizeOfStackReserve;
	(SIZE_TYPE)  SizeOfStackCommit;
	(SIZE_TYPE)  SizeOfHeapReserve;
	(SIZE_TYPE)  SizeOfHeapCommit;
	
	DWORD  LoaderFlags;
	DWORD  NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[NumberOfRvaAndSizes];
}

class IMAGE_DATA_DIRECTORY
{
	DWORD(16) VirtualAddress;
	DWORD(16) Size;
}

class IMAGE_SECTION_HEADER
{
    String(8) Name;
	@value = Name;
    DWORD(16) VirtualSize;
    DWORD(16) VirtualAddress;
    DWORD(16) SizeOfRawData;
    RVA PointerToRawData;
	@linkTo = PointerToRawData.@linkTo;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD  NumberOfRelocations;
    WORD  NumberOfLinenumbers;
    DWORD Characteristics;
}

class IMAGE_SECTION(name, _size, _virtualOffset) extends Data(_size << 3)
{

	var minVirtualOffset = @args._virtualOffset;
	var maxVirtualOffset = @args._virtualOffset + @args._size;
	var currentOffset = @context.currentOffset = @beginningPos - 8*minVirtualOffset;

	var count = @root._nt_header.OptionalHeader.NumberOfRvaAndSizes;

	DataDirectory := @root._nt_header.OptionalHeader.DataDirectory;
	
	for (var i = 0; i < count; ++i) {
		var directoryVirtualOffset = @root._nt_header.OptionalHeader.DataDirectory[i].VirtualAddress;

		if (minVirtualOffset <= directoryVirtualOffset && directoryVirtualOffset < maxVirtualOffset) {
			@pos = 8*(directoryVirtualOffset - minVirtualOffset);

			IMAGE_DIRECTORY_ENTRY(i, DataDirectory[i].Size << 3) _;
			@pos = 0;
		}
	}
}

class IMAGE_SECTIONS(count) with {elemType:IMAGE_SECTION(), elemCount:count}
{
	var n = @args.count;
	headers := @parent._section_headers;
	for (var i = 0; i < n; ++i) {
		header := headers[i];
		
		var sectionName          = header.Name;
		var sectionOffset        = header.PointerToRawData;
		if (sectionOffset) {
			var sectionSize          = header.SizeOfRawData;
			var sectionVirtualOffset = header.VirtualAddress;
			@pos = (sectionOffset << 3) - @beginningPos;
		} else {
			var sectionSize          = 0;
			var sectionVirtualOffset = 0;
		}
		IMAGE_SECTION(sectionName, sectionSize, sectionVirtualOffset) _;
	}
}

virtual class IMAGE_DIRECTORY_ENTRY(index, _size) extends Data(-1)

///////////////////////////////////////////////////////////
// Export table
///////////////////////////////////////////////////////////
class IMAGE_DIRECTORY_ENTRY_EXPORT as IMAGE_DIRECTORY_ENTRY(0)
{
	IMAGE_EXPORT_DIRECTORY _directory;
	
	@pos = _directory.AddressOfFunctions.@linkTo - @beginningPos;
	DWORD FunctionsAddresses[_directory.NumberOfFunctions];
	
	var numberOfNames = _directory.NumberOfNames;
	
	@pos = _directory.AddressOfNames.@linkTo - @beginningPos;
	RVA NamesAddresses[numberOfNames];
	
	@pos = _directory.AddressOfNameOrdinals.@linkTo - @beginningPos;
	WORD NamesOrdinals[numberOfNames];
	
	@pos = _directory.Name.@linkTo - @beginningPos;
	String Name;
	
	if (numberOfNames > 0) {
		var minLink = NamesAddresses[0].@linkTo;
		for (var i = 1; i < numberOfNames; ++i) {
			var link = NamesAddresses[i].@linkTo;
			if (link < minLink) {
				link = minLink;
			}
		}
		
		@pos = minLink - @beginningPos;
		
		IMAGE_EXPORT_NAMES(numberOfNames) _names;
	}
}

class IMAGE_EXPORT_DIRECTORY
{
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    RVA     Name;
    DWORD   Base;
    DWORD   NumberOfFunctions;
    DWORD   NumberOfNames;
    RVA     AddressOfFunctions;
    RVA     AddressOfNames;
    RVA     AddressOfNameOrdinals;
}

class IMAGE_EXPORT_NAMES(count) extends Data(-1) with {elemType:String(), elemCount:count}
{
	var count = @args.count;
	for (var i = 0; i < count; ++i) {
		@pos = @parent.NamesAddresses[i].@linkTo - @beginningPos;
		String #;
		@pos = 0;
	}
}

///////////////////////////////////////////////////////////
// Import table
///////////////////////////////////////////////////////////
class IMAGE_DIRECTORY_ENTRY_IMPORT as IMAGE_DIRECTORY_ENTRY(1)
{
	IMAGE_IMPORT_DESCRIPTORS _descriptors;
	var originalPos = _descriptors.@size;
	var count = _descriptors.@numberOfChildren - 1;
	IMAGE_IMPORT_NAMES(count) _names;
	@pos = originalPos;
	IMAGE_IMPORT_DATAS(count) _data;
}


class IMAGE_IMPORT_NAME extends String

class IMAGE_IMPORT_NAMES(count) extends Data(-1) 
   with {elemType:IMAGE_IMPORT_NAME(), elemCount:count}
{
	var n = @args.count;
	for  (var i = 0; i < n; ++i) {
		@pos = @parent._descriptors[i].Name.@linkTo - @beginningPos;
		IMAGE_IMPORT_NAME #;
	}
}

class IMAGE_IMPORT_DATAS(count) extends Data(-1)
	with {elemType:IMAGE_IMPORT_DATA(), elemCount:count}
{
	descriptors := @parent._descriptors;
	var n = @args.count;
	for (var i = 0; i < n; ++i) {
		IMAGE_IMPORT_DATA(descriptors[i].OriginalFirstThunk.@linkTo) #;
		@pos = 0;
	}
}

class IMAGE_IMPORT_DATA(_originalFirstThunk) extends Data(-1)
{
	@pos = @args._originalFirstThunk - @beginningPos;
	if (@global.HDR64) {
		var elementType = IMAGE_THUNK_DATA64();
	} else {
		var elementType = IMAGE_THUNK_DATA32();
	}
	IMAGE_THUNK_DATAS(elementType) _data;
	var n = _data.@numberOfChildren - 1;
	var importCount = 0;
	for (var i = 0; i < n; ++i) {
		if (_data[i].@linkTo) {
			++importCount;
		}
	}
	if (importCount > 0) {
		IMAGE_IMPORT_BY_NAMES(importCount) _;
	}
}

class IMAGE_THUNK_DATA32 extends DWORD(16)
{
	if (@value & 0x80000000) {
		@attr.Ordinal = @value & 0x7fffffff;
	} else if (@value) {
		var offset = @context.currentOffset;
		if (offset) {
			@linkTo = offset + 8*@value;
		} else {
			@linkTo = 8*@value;
		}
		@attr.AddressOfData = @value;
	}
}

class IMAGE_THUNK_DATA64 extends ULONGLONG(16)
{
	if (@value & 0x8000000000000000) {
		@attr.Ordinal = @value & 0x7fffffffffffffff;
	} else if (@value) {
		var offset = @context.currentOffset;
		if (offset) {
			@linkTo = offset + 8*@value;
		} else {
			@linkTo = 8*@value;
		}
		@attr.AddressOfData = @value;
	}
}

class IMAGE_THUNK_DATAS(elementType) with {elemType:elementType}
{
	var elementType = @args.elementType;
	do {
		(elementType) #;
	} while (self[] != 0)
}

class IMAGE_IMPORT_DESCRIPTORS with {elemType:IMAGE_IMPORT_DESCRIPTOR()}
{
	var n = 0;
	do {
		IMAGE_IMPORT_DESCRIPTOR #;
	} while (self[].OriginalFirstThunk != 0 || self[].FirstThunk != 0)
}

class IMAGE_IMPORT_DESCRIPTOR
{
    RVA   OriginalFirstThunk; // It points to the first thunk IMAGE_THUNK_DATA
	DWORD TimeDateStamp;      // 0 if not bound
	DWORD ForwarderChain;     // -1 if no forwarders
	RVA   Name;               // RVA of DLL Name.
	RVA   FirstThunk;         // RVA to IAT (if bound this IAT has actual addresses)
}

class IMAGE_IMPORT_BY_NAME
{
	WORD Hint;
	String Name;
    @attr.Hint = Hint;
    @attr.Name = Name;
}

class IMAGE_IMPORT_BY_NAMES(count) extends Data(-1)
	with {elemType:IMAGE_IMPORT_BY_NAME(), elemCount:count}
{
	var n = @parent._data.@numberOfChildren - 1;
	for (var i = 0; i < n; ++i) {
		var linkTo = @parent._data[i].@linkTo;
		if (linkTo) {
			@pos = linkTo - @beginningPos;
			IMAGE_IMPORT_BY_NAME #;
		}
	}
}

///////////////////////////////////////////////////////////
// Resource
///////////////////////////////////////////////////////////

class IMAGE_DIRECTORY_ENTRY_RESOURCE as IMAGE_DIRECTORY_ENTRY(2)
{
	@context.resourceRVAOffset = @beginningPos;
	currentResource := {
		"type" : "directory",
		"address" : @beginningPos-0,
		"level" : 0
	};
	for (; currentResource != undefined; currentResource := currentResource.next) {
		@context.currentResource := currentResource;
		
		if (currentResource.nameRVA) {
			@pos = currentResource.nameRVA - @beginningPos;
			IMAGE_RESOURCE_NAME resourceName;
			currentResource.name = self[];
		}
		@pos = currentResource.address - @beginningPos;
		if (currentResource.type == "directory") {
			IMAGE_RESOURCE_DIRECTORY directory;
		} else {
			IMAGE_RESOURCE_DATA_ENTRY leaf;
			@pos = self[].OffsetToData.@linkTo - @beginningPos;
			Data(self[].Size << 3) leafData;
			
		}
	}
}

class IMAGE_RESOURCE_NAME
{
	WORD count;
	WString(count) entryName;
	@value = entryName;
}

class IMAGE_RESOURCE_ENTRY
{
	resource := @context.currentResource;
	level := @attr.level = resource.level;
	if (resource.name != undefined) {
		@attr.name = resource.name;
	} else if (resource.integerId != undefined) {
		var id = @attr.id = resource.integerId;
		if (level == 1) {
			if (@global.resourceTypeArray == undefined) {
				@global.resourceTypeArray := CreateResourceTypeArray:();
			}
			var type = @global.resourceTypeArray[id];
			if (type != undefined) {
				@attr.type = type;
			}
		} else if (level == 3) {
			if (@global.resourceLanguageMap == undefined) {
				@global.resourceLanguageMap := CreateResourceLanguageMap:();
			}
			var language = @global.resourceLanguageMap[id];
			if (language != undefined) {
				@attr.language = language;
			}
		}
	}
}

class IMAGE_RESOURCE_DIRECTORY extends IMAGE_RESOURCE_ENTRY
{
	DWORD Characteristics;
	DWORD TimeDateStamp;
	WORD  MajorVersion;
	WORD  MinorVersion;
	WORD  NumberOfNamedEntries;
	WORD  NumberOfIdEntries;
	
	IMAGE_RESOURCE_DIRECTORY_ENTRY(0) NamedEntries[NumberOfNamedEntries];
	IMAGE_RESOURCE_DIRECTORY_ENTRY(1) IdEntries[NumberOfIdEntries];
	
	resource := @context.currentResource;
	childLevel := resource.level + 1;
	nextResource := resource.next;
	
	for (var i = 0; i < NumberOfNamedEntries; ++i) {
		entry := NamedEntries[i];
		var linkTo = entry.@linkTo;
		if (linkTo) {
			resource := resource.next := {
				"type" : entry.@attr.type,
				"nameRVA" : entry.NameRVA.@linkTo,
				"address" : linkTo,
				"level" : childLevel,
				"from" : @beginningPos
			};
		}
	}
	
	for (var j = 0; j < NumberOfIdEntries; ++j) {
		entry := IdEntries[j];
		var linkTo = entry.@linkTo;
		if (linkTo) {
			resource := resource.next := {
				"type" : entry.@attr.type,
				"integerId" : entry.IntegerID,
				"address" : linkTo,
				"level" : childLevel,
				"from" : @beginningPos
			};
		}
	}

	resource.next := nextResource;
}

class IMAGE_RESOURCE_DATA_ENTRY extends IMAGE_RESOURCE_ENTRY {
	RVA     OffsetToData;
    ULONG   Size;
    ULONG   CodePage;
    ULONG   Reserved;
}

class IMAGE_RESOURCE_DIRECTORY_ENTRY(_withId)
{
	if (@args._withId) {
		DWORD IntegerID;
	} else {
		ResourceRVA NameRVA;
	}
	
	ResourceRVA _;
	@linkTo = self[].@linkTo;
	@attr.type = self[].@attr.type;
}

class ResourceRVA extends DWORD(16)
{
	if (@value & 0x80000000) {
		@value &= 0x7fffffff;
		@attr.type = "directory";
	} else if (@value) {
		@attr.type = "leaf";
	}

	@linkTo = @context.resourceRVAOffset + 8*@value;
}

function CreateResourceTypeArray()
{
	return [
		undefined,
		"Cursor", //1
		"Bitmap", //2
		"Icon", //3
		"Menu", //4
		"Dialog", //5
		"String table", //6
		"Font directory", //7
		"Font", //8
		"Accelerators", //9
		"Unformatted resource data", //10
		"Message table", //11
		"Group cursor", //12
		undefined, //13
		"Group icon", //14
		undefined,
		"Version information", //16
		"Dlginclude", //17
		undefined,
		"Plug and play resource", //19
		"VXD", //20
		"Animated cursor", //21
		"Animated icon", //22
		"HTML", //23
		"Side-by-side assembly manifest" //24
	];
}

function CreateResourceLanguageMap()
{
	return {
		0x0C00 : "Default custom locale language",
		0x1400 : "Default custom MUI locale language",
		0x007F : "Invariant locale language",
		0x0000 : "Neutral locale language",
		0x0800 : "System default locale language",
		0x1000 : "Unspecified custom locale language",
		0x0400 : "User default locale language",
		0x0436 : "Afrikaans (za)",
		0x041C : "Albanian (al)",
		0x0484 : "Alsatian (fr)",
		0x045E : "Amharic (et)",
		0x1401 : "Arabic (dz)",
		0x3C01 : "Arabic (bh)",
		0x0C01 : "Arabic (eg)",
		0x0801 : "Arabic (iq)",
		0x2C01 : "Arabic (jo)",
		0x3401 : "Arabic (kw)",
		0x3001 : "Arabic (lb)",
		0x1001 : "Arabic (ly)",
		0x1801 : "Arabic (ma)",
		0x2001 : "Arabic (om)",
		0x4001 : "Arabic (qa)",
		0x0401 : "Arabic (sa)",
		0x2801 : "Arabic (sy)",
		0x1C01 : "Arabic (tn)",
		0x3801 : "Arabic (ae)",
		0x2401 : "Arabic (ye)",
		0x042B : "Armenian (am)",
		0x044D : "Assamese (in)",
		0x082C : "Azeri cyrillic (az)",
		0x042C : "Azeri latin (az)",
		0x0445 : "Bangla (in)",
		0x046D : "Bashkir (ru)",
		0x042D : "Basque (es)",
		0x0423 : "Belarusian (by)",
		0x781A : "Bosnian neutral (ba)",
		0x201A : "Bosnian cyrillic (ba)",
		0x141A : "Bosnian latin (ba)",
		0x047E : "Breton (fr)",
		0x0402 : "Bulgarian (bg)",
		0x0492 : "Central Kurdish (ku)",
		0x045C : "Cherokee (cher)",
		0x0403 : "Catalan (es)",
		0x0C04 : "Chinese (hk)",
		0x1404 : "Chinese (mo)",
		0x1004 : "Chinese (sg)",
		0x0004 : "Chinese simplified (zh)",
		0x7C04 : "Chinese traditional (zh)",
		0x0483 : "Corsican (fr)",
		0x001A : "Croatian neutral (ba)",
		0x101A : "Croatian latin (ba)",
		0x041A : "Croatian (ba)",
		0x0405 : "Czech (cz)",
		0x0406 : "Danish (dk)",
		0x048C : "Dari (af)",
		0x0465 : "Divehi (dv)",
		0x0813 : "Dutch (be)",
		0x0413 : "Dutch (nl)",
		0x0C09 : "English (au)",
		0x2809 : "English (bz)",
		0x1009 : "English (ca)",
		0x2409 : "English (029)",
		0x4009 : "English (in)",
		0x1809 : "English (ie)",
		0x2009 : "English (jm)",
		0x4409 : "English (my)",
		0x1409 : "English (nz)",
		0x3409 : "English (ph)",
		0x4809 : "English (sg)",
		0x1C09 : "English (za)",
		0x2C09 : "English (tt)",
		0x0809 : "English (gb)",
		0x0409 : "English (us)",
		0x3009 : "English (zw)",
		0x0425 : "Estonian (ee)",
		0x0438 : "Faroese (fo)",
		0x0464 : "Filipino (ph)",
		0x040B : "Finnish (fi)",
		0x080C : "French (be)",
		0x0C0C : "French (ca)",
		0x040C : "French (fr)",
		0x140C : "French (lu)",
		0x180C : "French (mc)",
		0x100C : "French (ch)",
		0x0462 : "Frisian (nl)",
		0x0456 : "Galician (es)",
		0x0437 : "Georgian (ge)",
		0x0C07 : "German (at)",
		0x0407 : "German (de)",
		0x1407 : "German (li)",
		0x1007 : "German (lu)",
		0x0807 : "German (ch)",
		0x0408 : "Greek (gr)",
		0x046F : "Greenlandic (gl)",
		0x0447 : "Gujarati (in)",
		0x0468 : "Hausa (ng)",
		0x0475 : "Hawiian (us)",
		0x040D : "Hebrew (il)",
		0x0439 : "Hindi (in)",
		0x040E : "Hungarian (hu)",
		0x040F : "Icelandic (is)",
		0x0470 : "Igbo (ng)",
		0x0421 : "Indonesian (id)",
		0x085D : "Inuktitut latin (ca)",
		0x045D : "Inuktitut syllabics (ca)",
		0x083C : "Irish (ie)",
		0x0434 : "isiXhosa (za)",
		0x0435 : "isiZulu (za)",
		0x0410 : "Italian (it)",
		0x0810 : "Italian (ch)",
		0x0411 : "Japanese (jp)",
		0x044B : "Kannada (in)",
		0x043F : "Kazakh (kz)",
		0x0453 : "Khmer (kh)",
		0x0486 : "K'iche (gt)",
		0x0487 : "Kinyarwanda (rw)",
		0x0457 : "Konkani (in)",
		0x0412 : "Korean (ko)",
		0x0440 : "Kyrgyz (ky)",
		0x0454 : "Lao (la)",
		0x0426 : "Latvian (lv)",
		0x0427 : "Lithuanian (lt)",
		0x082E : "Lower Sorbian (de)",
		0x046E : "Luxembourgish (lu)",
		0x042F : "Macedonian (mk)",
		0x083E : "Malay (bn)",
		0x043E : "Malay (my)",
		0x044C : "Malayalam (in)",
		0x043A : "Maltese (in)",
		0x0481 : "Maori (nl)",
		0x047A : "Mapudungun (cl)",
		0x044E : "Marathi (in)",
		0x047C : "Mohawk (ca)",
		0x0450 : "Mongolian cyrillic (mn)",
		0x8050 : "Mongolian mong (mn)",
		0x0461 : "Nepali (np)",
		0x0414 : "Norwegian Bokm (no)",
		0x0814 : "Norwegian Nyork (no)",
		0x0482 : "Occitan (fr)",
		0x0448 : "Oriya (in)",
		0x0463 : "Pashto (af)",
		0x0429 : "Persian (ir)",
		0x0415 : "Polish (pl)",
		0x0416 : "Portuguese (br)",
		0x0816 : "Portuguese (pt)",
		0x0867 : "Pular (sn)",
		0x0446 : "Punjabi Gurmukhi script (in)",
		0x0846 : "Punjabi Arabic script (in)",
		0x046B : "Quechua (bo)",
		0x086B : "Quechua (ec)",
		0x0C6B : "Quechua (pe)",
		0x0418 : "Romanian (ro)",
		0x0417 : "Romansh (rm)",
		0x0419 : "Russian (ru)",
		0x0485 : "Sakha (ru)",
		0x243B : "Sami Inari (fi)",
		0x103B : "Sami Lule (no)",
		0x143B : "Sami Lule (se)",
		0x0C3B : "Sami Northern (fi)",
		0x043B : "Sami Northern (no)",
		0x083B : "Sami Northern (se)",
		0x203B : "Sami Skolt (fi)",
		0x183B : "Sami Southern (no)",
		0x1C3B : "Sami Southern (se)",
		0x044F : "Sanskrit (in)",
		0x7C1A : "Serbian Cyrillic (ba)",
		0x181A : "Serbian Latin (ba)",
		0x0C1A : "Serbian Cyrillic (cs)",
		0x081A : "Serbian Latin (cs)",
		0x046C : "Sesotho sa Leboa (za)",
		0x0832 : "Setwana/Tswana (bw)",
		0x0432 : "Setwana/Tswana (za)",
		0x0859 : "Sindhi (pk)",
		0x045B : "Sinhala (lk)",
		0x0424 : "Slovak (sk)",
		0x2C0A : "Spanish (ar)",
		0x400A : "Spanish (bo)",
		0x340A : "Spanish (cl)",
		0x240A : "Spanish (co)",
		0x140A : "Spanish (cr)",
		0x1C0A : "Spanish (do)",
		0x300A : "Spanish (ec)",
		0x440A : "Spanish (sv)",
		0x100A : "Spanish (gt)",
		0x480A : "Spanish (hn)",
		0x080A : "Spanish (mx)",
		0x4C0A : "Spanish (ni)",
		0x180A : "Spanish (pa)",
		0x3C0A : "Spanish (py)",
		0x280A : "Spanish (pe)",
		0x500A : "Spanish (pr)",
		0x0C0A : "Spanish Modern Sort (es)",
		0x040A : "Spanish Traditional Sort (es)",
		0x540A : "Spanish (us)",
		0x380A : "Spanish (uy)",
		0x200A : "Spanish (ve)",
		0x0441 : "Swahili (ke)",
		0x081D : "Swedish (fi)",
		0x041D : "Swedish (se)",
		0x045A : "Syriac (sy)",
		0x0428 : "Tajik (tg)",
		0x085F : "Tamazight (dz)",
		0x0449 : "Tamil (in)",
		0x0849 : "Tamil (lk)",
		0x0444 : "Tatar (ru)",
		0x044A : "Telugu (in)",
		0x041E : "Thai (th)",
		0x0451 : "Tibetian (bo)",
		0x0873 : "Tigrinya (er)",
		0x0473 : "Tigrinya (et)",
		0x041F : "Turkish (tr)",
		0x0442 : "Turkmen (tk)",
		0x0422 : "Ukrainian (uk)",
		0x042E : "Upper Sorbian (de)",
		0x0420 : "Urdu (pk)",
		0x0843 : "Uzbek Cyrillic (uz)",
		0x0443 : "Uzbek Latin (uz)",
		0x0803 : "Valencian (es)",
		0x042A : "Vietnamese (vn)",
		0x0488 : "Wolof (sn)",
		0x0478 : "Yi (ii)",
		0x046A : "Yoruba (yo)"
	};
}

///////////////////////////////////////////////////////////
// Exception
///////////////////////////////////////////////////////////

class IMAGE_DIRECTORY_ENTRY_EXCEPTION as IMAGE_DIRECTORY_ENTRY(3)

///////////////////////////////////////////////////////////
// Security
///////////////////////////////////////////////////////////

class IMAGE_DIRECTORY_ENTRY_SECURITY as IMAGE_DIRECTORY_ENTRY(4)

///////////////////////////////////////////////////////////
// Relocation table
///////////////////////////////////////////////////////////
class IMAGE_DIRECTORY_ENTRY_BASERELOC as IMAGE_DIRECTORY_ENTRY(5)
{
	do {
		IMAGE_BASE_RELOCATION #;
    } while (self[].VirtualAddress)
}

class IMAGE_BASE_RELOCATION
{
	DWORD VirtualAddress;
	DWORD SizeOfBlock;
	if (SizeOfBlock) {
		IMAGE_BASE_RELOCATION_ITEM _items [(8*SizeOfBlock-@pos)/SizeOf:(WORD())];
	}
}

class IMAGE_BASE_RELOCATION_ITEM extends WORD
{
	@attr.Type = @value >> 12;
	@value &= 0x0fff;
}

///////////////////////////////////////////////////////////
// Debug
///////////////////////////////////////////////////////////

class IMAGE_DIRECTORY_ENTRY_DEBUG as IMAGE_DIRECTORY_ENTRY(6)

///////////////////////////////////////////////////////////
// Copyright
///////////////////////////////////////////////////////////

class IMAGE_DIRECTORY_ENTRY_COPYRIGHT as IMAGE_DIRECTORY_ENTRY(7)

///////////////////////////////////////////////////////////
// Global ptr
///////////////////////////////////////////////////////////

class IMAGE_DIRECTORY_ENTRY_EXCEPTION as IMAGE_DIRECTORY_ENTRY(8)

///////////////////////////////////////////////////////////
// Thread local storage
///////////////////////////////////////////////////////////

class IMAGE_DIRECTORY_ENTRY_TLS as IMAGE_DIRECTORY_ENTRY(9)
{
	(@global.HDR64 ? IMAGE_TLS_DIRECTORY64() : IMAGE_TLS_DIRECTORY32()) _directory;
}

class IMAGE_TLS_DIRECTORY64 
{
    ULONGLONG   StartAddressOfRawData;
    ULONGLONG   EndAddressOfRawData;
    ULONGLONG   AddressOfIndex;
    ULONGLONG   AddressOfCallBacks;
    DWORD       SizeOfZeroFill;
    DWORD       Characteristics;
}
 
class IMAGE_TLS_DIRECTORY32 
{
    DWORD   StartAddressOfRawData;
    DWORD   EndAddressOfRawData;
    DWORD   AddressOfIndex;
    DWORD   AddressOfCallBacks;
    DWORD   SizeOfZeroFill;
    DWORD   Characteristics;
}

///////////////////////////////////////////////////////////
// Load configuration
///////////////////////////////////////////////////////////

class IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG as IMAGE_DIRECTORY_ENTRY(10)

///////////////////////////////////////////////////////////
// Bound import
///////////////////////////////////////////////////////////

class IMAGE_DIRECTORY_BOUND_IMPORT as IMAGE_DIRECTORY_ENTRY(11)

///////////////////////////////////////////////////////////
// Import address table
///////////////////////////////////////////////////////////

class IMAGE_DIRECTORY_ENTRY_IAT as IMAGE_DIRECTORY_ENTRY(12)
{
	descriptors := @parent[IMAGE_DIRECTORY_ENTRY_IMPORT()]._descriptors;
	if (descriptors != undefined) {
		var n = descriptors.@numberOfChildren - 1;
		for (var i = 0; i < n; ++i) {
			IMAGE_IMPORT_DATA(descriptors[i].FirstThunk.@linkTo) #;
			@pos = 0;
		}
	}
}

///////////////////////////////////////////////////////////
// Delay import descriptor
///////////////////////////////////////////////////////////

class IMAGE_DIRECTORY_ENTRY_DELAY as IMAGE_DIRECTORY_ENTRY(13)

///////////////////////////////////////////////////////////
// COM+ Runtime Header
///////////////////////////////////////////////////////////

class IMAGE_DIRECTORY_ENTRY_COM as IMAGE_DIRECTORY_ENTRY(14)
