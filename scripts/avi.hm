//This file is part of the HexaMonkey project, a multimedia analyser
//Copyright (C) 2013  Sevan Drapeau-Martin, Nicolas Fleury

//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either version 2
//of the License, or (at your option) any later version.

//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


addMagicNumber 52 49 46 46 xx xx xx xx 41 56 49 20 4c 49 53 54
addExtension avi

import riff

class AviFile as File
{
	@endianness = "littleEndian";
	
	while(1) CHUNK *;
}

class AviRIFF as RIFF("AVI "),
      AvixRIFF as RIFF("AVIX")
{
    @context.namespace = "AVI";
    while(1) {
        CHUNK *;
    }
}

class AviHeaderList as LIST("hdrl", "AVI")

class MainAviHeader as CHUNK("avih")
{
	DWORD dwMicroSecPerFrame; // frame display rate (or 0)
	DWORD dwMaxBytesPerSec; // max. transfer rate
	DWORD dwPaddingGranularity; // pad to multiples of this
	                            // size;
	DWORD dwFlags; // the ever-present flags
	DWORD dwTotalFrames; // # frames in file
	DWORD dwInitialFrames;
	DWORD dwStreams;
	DWORD dwSuggestedBufferSize;
	DWORD dwWidth;
	DWORD dwHeight;
	DWORD dwReserved[4];
}

class StreamHeaderList as LIST("strl", "AVI")

class StreamHeader as CHUNK("strh", "AVI")
{
	FOURCC fccType;
	FOURCC fccHandler;
	DWORD dwFlags;
	WORD wPriority;
	WORD wLanguage;
	DWORD dwInitialFrames;
	DWORD dwScale;
	DWORD dwRate; /* dwRate / dwScale == samples/second */
	DWORD dwStart;
	DWORD dwLength; /* In units above... */
	DWORD dwSuggestedBufferSize;
	DWORD dwQuality;
	DWORD dwSampleSize;
	RECT rcFrame;
}

virtual class StreamFormat(fccType) as CHUNK("strf", "AVI")
{
	@args.fccType = @parent[StreamHeader()].fccType;
}

class BitmapInfoHeader as StreamFormat("vids")
{
	DWORD biSize;
	LONG  biWidth;
	LONG  biHeight;
	WORD  biPlanes;
	WORD  biBitCount;
	FOURCC biCompression;
	DWORD biSizeImage;
	LONG  biXPelsPerMeter;
	LONG  biYPelsPerMeter;
	DWORD biClrUsed;
	DWORD biClrImportant;
}

class WaveFormatEx as StreamFormat("auds")
{
	WORD  wFormatTag;
	WORD  nChannels;
	DWORD nSamplesPerSec;
	DWORD nAvgBytesPerSec;
	WORD  nBlockAlign;
	WORD  wBitsPerSample;
	WORD  cbSize;
}

class StreamName as CHUNK("strn", "AVI")
{
	STR name;
}

class IndexChunk as CHUNK("indx", "AVI")
{
	WORD wLongsPerEntry;
	BYTE bIndexSubType;
	BYTE bIndexType;
	DWORD nEntriesInUse;
	DWORD dwChunkId;
	DWORD dwReserved[3];
	DWORD adw[wLongsPerEntry][];
}

class IndexEntries as CHUNK("idx1", "AVI")
{
	IndexEntry entries[];
}

class IndexEntry
{
	FOURCC ckid;
	DWORD dwFlags;
	DWORD dwChunkOffset;
	DWORD dwChunkLength;
}

class MovieList as LIST("movi", "AVI")
class MovieRecord as LIST("rec ", "AVI")

class AudioChunk as CHUNK("wb", "AVI")  
{
	Data payload;
}

class CompressedVideoChunk as CHUNK("dc", "AVI")
{
    Data payload;
}

class UncompressedCompressedVideoChunk as CHUNK("db", "AVI")
{
    Data payload;
}

class SubtitleChunk as CHUNK("tx", "AVI")
{
    Data payload;
}

class StandardIndexBlock as CHUNK("ix", "AVI")
{
    Data payload;
}

class OpenDMLList as LIST("odml", "AVI")

class ODMLExtendedAVIHeader as CHUNK("dmlh", "AVI")
{
	DWORD dwTotalFrames;
} 
