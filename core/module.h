//This file is part of the HexaMonkey project, a multimedia analyser
//Copyright (C) 2013  Sevan Drapeau-Martin, Nicolas Fleury

//This program is free software; you can redistribute it and/or
//modify it under the terms of the GNU General Public License
//as published by the Free Software Foundation; either version 2
//of the License, or (at your option) any later version.

//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#ifndef MODULE_H
#define MODULE_H

#define HM_UNKNOWN_SIZE -1
#define HM_PARENT_SIZE -2

#include <list>
#include <map>
#include <set>
#include <algorithm>
#include <memory>

#include "core/objecttype.h"
#include "core/objecttypetemplate.h"
#include "core/formatdetector/standardformatdetector.h"
#include "core/variable/variable.h"
#include "core/specializer.h"
#include "core/modulemethod.h"
#include "core/object.h"

class Parser;
class Variable;

#define functionLambda (const Variable& scope, const Module &module) ->Variable

/*!
 * @brief Factory for \link Object objects\endlink
 *
 * Given a \link ObjectType type\endlink and a \link File file\endlink it can create an object beginning at the current position
 * of the \link File file\endlink and add the appropriate \link Parser parsers\endlink.
 *
 * It holds an object model that defines extensions and specification for \link ObjectType types\endlink handled. This will define which
 * parsers are added. Each parser correspond to a \link ObjectType type\endlink generated by getParser, if the \link ObjectType type\endlink A extends
 * the \link ObjectType type\endlink B then the parser for B will be added and then the parser for A.
 *
 * In addition to extensions, the object model defines specification, which means that if after minimal parser an \link Object object\endlink has
 * \link ObjectType type\endlink A and A's specification is B then \link Parser parser\endlink for B will be subsequently added and the
 * \link ObjectType type\endlink of the \link Object object\endlink will be B.
 *
 * It can also define functions that can be used in HMDLs.
 *
 * Other modules can be imported, in which case if a \link ObjectType type\endlink or a function can not be handle by the \link Module module\endlink,
 * then the imported \link Module modules\endlink will serve as fallback with priority for the last loaded.
 *
 * The life cycle of the \link Module module\endlink is handled by a \link ModuleLoader module loader\endlink : on construction the \link Module module\endlink must
 * have the smallest memory footprint possible abd the shortest runtime, when added to the \link ModuleLoader module loader\endlink format detection will be added so
 * that the module loader knows on which file the \link Module module\endlink should be used (reimplement addFormatDetection). Then when when the \link ModuleLoader
 * module loader\endlink uses the module for the first time, it first ask for importation request to see which \link Module modules\endlink must be loaded and imported
 * (reimplement requestImportations) and then the actual loading is done (reimplement doLoad).
 *
 * The class is virtual and must be subclassed to be used. For most usages Module is the right class to subclass.
 */
class Module
{
public:
    Module();

    inline const std::string& name() const
    {
        return _name;
    }

    const Module& getImportedModule(const std::string& name) const;

    /**
     * @brief Get the specification for the parent object
     *
     * Returns the \link ObjectType::isNull null\endlink type if the \link ObjectType type\endlink doesn't have a specification
     */
    ObjectType specify(const ObjectType& parent) const;

    /**
     * @brief Set the specification for the parent
     */
    void setSpecification(const ObjectType& parent, const ObjectType& child);

    inline Object* handleFile(const ObjectType &type, File& file, VariableCollector& collector) const
    {
        return handle(type, file, nullptr, collector);
    }
    /**
     * @brief Create an object beginning at the current position of the file and add the appropriate \link Parser
     * parsers\endlink according to the inheritance structure for the type
     */
    inline Object* handle(const ObjectType& type, Object& parent) const
    {
        return handle(type, parent.file(), &parent, parent.collector());
    }

    /**
     * @brief Get a \link ObjectTypeTemplate type template\endlink stored by the \link Module module\endlink or one of the imported one, by its name
     */
    const ObjectTypeTemplate& getTemplate(const std::string& name) const;

    inline ObjectType getType(const std::string& name) const
    {
        return ObjectTypeCreator::Create(getTemplate(name));
    }

    template<typename... Args> inline ObjectType getType(const std::string& name, Args... args) const
    {
         ObjectType type = ObjectTypeCreator::Create(getTemplate(name));
         type.setParameters(args...);
         return type;
    }

    inline ObjectType getType(const ObjectTypeTemplate& typeTemplate) const
    {
        return ObjectTypeCreator::Create(typeTemplate);
    }

    template<typename... Args> inline ObjectType getType(const ObjectTypeTemplate& typeTemplate, Args... args) const
    {
         ObjectType type = ObjectTypeCreator::Create(typeTemplate);
         type.setParameters(args...);
         return type;
    }

    std::shared_ptr<ObjectType> getSharedType(const std::string& name) const
    {
        return ObjectTypeCreator::CreateShared(getTemplate(name));
    }

    template<typename... Args> std::shared_ptr<ObjectType> getSharedType(const std::string& name, Args... args) const
    {
        auto type = ObjectTypeCreator::CreateShared(getTemplate(name));
        type->setParameters(args...);
        return type;
    }

    std::shared_ptr<ObjectType> getSharedType(const ObjectTypeTemplate& typeTemplate) const
    {
        return ObjectTypeCreator::CreateShared(typeTemplate);
    }

    template<typename... Args> std::shared_ptr<ObjectType> getSharedType(const ObjectTypeTemplate& typeTemplate, Args... args) const
    {
        auto type = ObjectTypeCreator::CreateShared(typeTemplate);
        type->setParameters(args...);
        return type;
    }

    Variable getVariable(const std::string& name, VariableCollector& collector) const;

    /**
     * @brief Get the module able to handle a function by this name among the current\link Module module\endlink and the imported ones
     *
     * Return nullptr if no function by this name can be handled
     */
    const Module* functionHandler(const std::string &name) const;

    /**
     * @brief Execute the function with the parameters given as a \link Scope scope\endlink
     */
    Variable executeFunction(const std::string &name, const Variable &params) const;

    /**
     * @brief Get the names of the parameters as a vector of strings
     */
    const std::vector<std::string>& getFunctionParameterNames(const std::string& name) const;

    /**
     * @brief Get a vector of boolean specifying for each parameter if the function can modify the value or not
     */
    const std::vector<bool>& getFunctionParameterModifiables(const std::string& name) const;

    /**
     * @brief Get a vector of values specifying default values for each parameter
     */
    const std::vector<Variant>& getFunctionParameterDefaults(const std::string& name) const;

    /**
     * @brief Check if the module has been successfully loaded by the
     * \link ModuleLoader module loader\endlink
     */
    bool isLoaded() const
    {
        return _loaded;
    }

protected:
    /**
     * @brief [Pure Virtual] Use the \link StandardFormatDetector::Adder format adder\endlink to add format detection methods, so that the
     * \link ModuleLoader module loader\endlink can choose which module to use to parse a file
     */
    virtual void addFormatDetection(StandardFormatDetector::Adder& formatAdder);

    /**
     * @brief [Pure Virtual] Complete the list of \link Module modules\endlink that the \link ModuleLoader module loader\endlink
     * should load and import to the module, by adding the names of the \link Module modules\endlink requested.
     */
    virtual void requestImportations(std::vector<std::string>& modulesRequested);

    /**
     * @brief [Pure Virtual] Initialize the module. The function will be called by the \link ModuleLoader module loader\endlink when the
     * module is first used, after the requested modules have been added.
     */
    virtual bool doLoad();

    /**
     * @brief Register a \link ObjectTypeTemplate type template\endlink to the \link Module module\endlink so that it can be
     * accessed by its name by the function getTemplate.
     *
     * Every \link ObjectTypeTemplate type template\endlink should be registered so that when the \link Module module\endlink
     * is imported into an \link FromFileModule HMDL module\endlink, the \link ObjectTypeTemplate type template\endlink
     * can be recognized.
     */
    void addTemplate(const ObjectTypeTemplate& typeTemplate);
    ObjectTypeTemplate& addTemplate(ObjectTypeTemplate* typeTemplate);

    void addMethod(const std::string& name, ModuleMethod *method);

private:
    friend class ModuleLoader;
    template<class T>
    struct UnrefCompare : public std::binary_function<T, T, bool>
    {
        bool operator()(T x, T y) const
        {
            return *x < *y;
        }
    };

    /** @brief Import a \link Module module\endlink to serve as fallback if a \link ObjectType type\endlink cannot be handled directly by the
     *  \link Module module\endlink
     *
     * If a \link ObjectType type\endlink or a function is not handled by the the \link Module module\endlink, then a handler will be searched among the
     * imported modules, with a priority for the lastest \link Module module\endlink imported
     */
    void import(const Module& module);

    bool load()
    {
        if(!_loaded)
        {
            _loaded = doLoad();
        }
        return _loaded;
    }

    ObjectType specifyLocally(const ObjectType& parent) const;
    void addParsers(Object& data, const ObjectType &type) const;

    Object* handle(const ObjectType& type, File& file, Object *parent, VariableCollector& collector) const;

    std::string _name;
    bool _loaded;

    std::vector<const Module*> _importedModulesChain;
    std::unordered_map<std::string, const Module*> _importedModulesMap;

    mutable std::unordered_map<std::string, const ObjectTypeTemplate*> _templates;
    std::vector<std::unique_ptr<ObjectTypeTemplate> > _ownedTemplates;
    std::unordered_map<ObjectTypeTemplate *, Specializer> _specializers;


    mutable std::unordered_map<std::string, const ModuleMethod*> _methods;
    std::vector<std::unique_ptr<ModuleMethod> > _ownedMethods;
};

#endif // MODULE_H
